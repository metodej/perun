openapi: 3.0.2
info:
  version: 3.9.0
  title: Perun RPC API
  description: Perun Remote Procedure Calls Application Programming Interface
  contact:
    url: https://perun-aai.org
    email: perun@cesnet.cz

servers:
  - url: 'https://{server}/{authentication}/rpc'
    description: Perun RPC server
    variables:
      server:
        default: perun.cesnet.cz
        description: DNS name of a Perun server
      authentication:
        default: krb
        description: way of authentication
        enum:
          - krb
          - cert
          - oidc
          - fed

security:
  - BasicAuth: []
  - BearerAuth: []
  - ApiKeyAuth: []

components:
  #############################################
  #                                           #
  # SECURITY SCHEMES - ways of authentication #
  #                                           #
  #############################################
  securitySchemes:
    BasicAuth:
      type: http
      scheme: basic
    BearerAuth:
      type: http
      scheme: bearer
    ApiKeyAuth:
      type: apiKey
      in: header
      name: Authorization
    OpenID:
      type: openIdConnect
      openIdConnectUrl: https://login.cesnet.cz/oidc/.well-known/openid-configuration

  #############################################
  #                                           #
  # SCHEMAS - data objects definitions        #
  #                                           #
  #############################################
  schemas:
    PerunException:
      type: object
      properties:
        errorId: { type: string }
        name: { type: string }
        message: { type: string }

    PerunBean:
      type: object
      properties:
        id: { type: integer }
        beanName: { type: string }
      required:
        - id
        - beanName
      discriminator:
        propertyName: beanName

    Auditable:
      allOf:
        - $ref: '#/components/schemas/PerunBean'
        - properties:
            createdAt: { type: string }
            createdBy: { type: string }
            modifiedAt: { type: string }
            modifiedBy: { type: string }
            createdByUid: { type: integer }
            modifiedByUid: { type: integer }
            beanName: { type: string }
      discriminator:
        propertyName: beanName

    User:
      allOf:
        - $ref: '#/components/schemas/Auditable'
        - properties:
            firstName: { type: string }
            lastName: { type: string }
            middleName: { type: string }
            titleBefore: { type: string }
            titleAfter: { type: string }
            serviceUser: { type: boolean }
            sponsoredUser: { type: boolean }
            specificUser: { type: boolean }
            majorSpecificType:  { type: string }
            beanName: { type: string }
      discriminator:
        propertyName: beanName

    RichUser:
      allOf:
        - $ref: '#/components/schemas/User'
        - properties:
            userExtSources: { type: array, items: { $ref: '#/components/schemas/UserExtSource' } }
            userAttributes: { type: array, items: { $ref: '#/components/schemas/Attribute' } }
            beanName: { type: string }
          required:
            - userExtSources
            - userAttributes
      discriminator:
        propertyName: beanName

    Member:
      allOf:
        - $ref: '#/components/schemas/Auditable'
        - properties:
            userId: { type: integer }
            voId: { type: integer }
            status: { type: string }
            membershipType: { type: string }
            sourceGroupId: { type: integer }
            sponsored: { type: boolean }
            suspendedTo: { type: string }
            suspended: { type: boolean }
            groupStatus:  { type: string }
            groupStatuses:
              type: object
              additionalProperties:
                type: string
            beanName: { type: string }
      discriminator:
        propertyName: beanName

    RichMember:
      allOf:
        - $ref: '#/components/schemas/Member'
        - properties:
            user: { $ref: '#/components/schemas/User' }
            userExtSources: { type: array, items: { $ref: '#/components/schemas/UserExtSource' } }
            userAttributes: { type: array, items: { $ref: '#/components/schemas/Attribute' } }
            memberAttributes: { type: array, items: { $ref: '#/components/schemas/Attribute' } }
            beanName: { type: string }
          required:
            - user
            - userExtSources
      discriminator:
        propertyName: beanName

    UserExtSource:
      allOf:
        - $ref: '#/components/schemas/Auditable'
        - properties:
            login: { type: string }
            userId: { type: integer }
            loa: { type: integer }
            persistent: { type: boolean }
            lastAccess: { type: string, format: timestamp, description: 'SQL timestamp', example: '2012-01-01 00:00:00.100000' }
            extSource: { $ref: '#/components/schemas/ExtSource' }
            beanName: { type: string }
          required:
            - login
            - extSource
      discriminator:
        propertyName: beanName

    ExtSource:
      allOf:
        - $ref: '#/components/schemas/Auditable'
        - properties:
            name: { type: string }
            type: { type: string }
            beanName: { type: string }
      discriminator:
        propertyName: beanName

    AttributeDefinition:
      allOf:
        - $ref: '#/components/schemas/Auditable'
        - properties:
            friendlyName: { type: string }
            namespace: { type: string }
            description: { type: string }
            type: { type: string }
            displayName: { type: string }
            writable: { type: boolean }
            unique: { type: boolean }
            beanName: { type: string }
      discriminator:
        propertyName: beanName

    Attribute:
      allOf:
        - $ref: '#/components/schemas/AttributeDefinition'
        - properties:
            valueCreatedAt: { type: string }
            valueCreatedBy: { type: string }
            valueModifiedAt: { type: string }
            valueModifiedBy: { type: string }
            value: { type: object }
            beanName: { type: string }
      discriminator:
        propertyName: beanName

    Facility:
      allOf:
        - $ref: '#/components/schemas/Auditable'
        - properties:
            name: { type: string }
            description: { type: string }
            beanName: { type: string }
      discriminator:
        propertyName: beanName

    RichFacility:
      allOf:
        - $ref: '#/components/schemas/Facility'
        - properties:
            facilityOwners: { type: array, items: { $ref: '#/components/schemas/Owner' } }
            beanName: { type: string }
          required:
            - facilityOwners
      discriminator:
        propertyName: beanName

    Host:
      allOf:
        - $ref: '#/components/schemas/Auditable'
        - properties:
            hostname: { type: string }
            beanName: { type: string }
      discriminator:
        propertyName: beanName

    Owner:
      allOf:
        - $ref: '#/components/schemas/Auditable'
        - properties:
            name: { type: string }
            contact: { type: string }
            type:
              type: string
              enum: [ technical, administrative ]
            beanName: { type: string }
      discriminator:
        propertyName: beanName

    Group:
      allOf:
        - $ref: '#/components/schemas/Auditable'
        - properties:
            name: { type: string }
            shortName: { type: string }
            description: { type: string }
            voId: { type: integer }
            parentGroupId: { type: integer }
            beanName: { type: string }
      discriminator:
        propertyName: beanName

    RichGroup:
      allOf:
        - $ref: '#/components/schemas/Group'
        - properties:
            attributes: { type: array, items: { $ref: '#/components/schemas/Attribute' } }
            beanName: { type: string }
      discriminator:
        propertyName: beanName

    Resource:
      allOf:
        - $ref: '#/components/schemas/Auditable'
        - properties:
            name: { type: string }
            description: { type: string }
            voId: { type: integer }
            facilityId: { type: integer }
            beanName: { type: string }
      discriminator:
        propertyName: beanName

    RichResource:
      allOf:
        - $ref: '#/components/schemas/Resource'
        - properties:
            vo: { $ref: '#/components/schemas/Vo' }
            facility: { $ref: '#/components/schemas/Facility' }
            resourceTags: { type: array, items: { $ref: '#/components/schemas/ResourceTag' } }
            beanName: { type: string }
      discriminator:
        propertyName: beanName

    ResourceTag:
      allOf:
        - $ref: '#/components/schemas/Auditable'
        - properties:
            tagName: { type: string }
            voId: { type: integer }
            beanName: { type: string }
      discriminator:
        propertyName: beanName

    Vo:
      allOf:
        - $ref: '#/components/schemas/Auditable'
        - properties:
            name: { type: string }
            shortName: { type: string }
            beanName: { type: string }
      discriminator:
        propertyName: beanName

    VoAdminRoles:
      type: string
      description: 'admin roles for a Vo'
      enum:
        - "VOOBSERVER"
        - "TOPGROUPCREATOR"
        - "VOADMIN"

    Service:
      allOf:
        - $ref: '#/components/schemas/Auditable'
        - properties:
            name: { type: string }
            description: { type: string }
            delay: { type: integer }
            recurrence: { type: integer }
            enabled: { type: boolean }
            script: { type: string }
            beanName: { type: string }
      discriminator:
        propertyName: beanName

    DestinationType:
      type: string
      description: 'type of destination, i.e. way of delivery of service settings'
      enum:
        - "host"
        - "email"
        - "semail"
        - "url"
        - "user@host"
        - "user@host:port"
        - "service-specific"
        - "user@host-windows"
        - "host-windows-proxy"

    DestinationPropagationType:
      type: string
      description: 'type of propagation of service settings to a destination'
      enum: ['PARALLEL', 'SERIAL', 'DUMMY' ]

    Destination:
      allOf:
        - $ref: '#/components/schemas/Auditable'
        - properties:
            destination: { type: string }
            type: { $ref: '#/components/schemas/DestinationType' }
            propagationType: { $ref: '#/components/schemas/DestinationPropagationType' }
            beanName: { type: string }
      discriminator:
        propertyName: beanName

    RichDestination:
      allOf:
        - $ref: '#/components/schemas/Destination'
        - properties:
            service: { $ref: '#/components/schemas/Service' }
            facility: { $ref: '#/components/schemas/Facility' }
            beanName: { type: string }
      discriminator:
        propertyName: beanName

    ApplicationForm:
      type: object
      properties:
        id: { type: integer }
        vo: { $ref: '#/components/schemas/Vo' }
        group: { $ref: '#/components/schemas/Group' }
        automaticApproval: { type: boolean }
        automaticApprovalExtension: { type: boolean }
        moduleClassName: {type: string }

    PerunPrincipal:
      type: object
      required:
        - userId
        - user
      properties:
        actor: { type: string }
        extSourceName: { type: string }
        extSourceType: { type: string }
        extSourceLoa: { type: integer }
        user: { $ref: "#/components/schemas/User" }
        authzInitialized: { type: boolean }
        additionalInformations:
          type: object
          additionalProperties: { type: string }
        userId: { type: integer }
        # Map<String, Map<String, List<Integer>>>
        roles:
          type: object
          additionalProperties:
            type: object
            additionalProperties:
              type: array
              items:
                type: integer

  #################################################
  #                                               #
  # RESPONSES - type definitions of return values #
  #                                               #
  #################################################
  responses:
    ExceptionResponse:
      description: exception occured
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/PerunException"

    VoidResponse:
      description: "returns nothing"

    IntegerResponse:
      description: "returns Integer"
      content:
        application/json:
          schema:
            type: integer

    LongResponse:
      description: "returns Long"
      content:
        application/json:
          schema:
            type: integer
            format: int64

    BooleanResponse:
      description: "returns Boolean"
      content:
        application/json:
          schema:
            type: boolean

    StringResponse:
      description: "returns String"
      content:
        application/json:
          schema:
            type: string

    ListOfStringsResponse:
      description: "returns List<String>"
      content:
        application/json:
          schema:
            type: array
            items:
              type: string

    MapStringStringResponse:
      description: "returns Map<String,String>"
      content:
        application/json:
          schema:
            type: object
            additionalProperties:
                type: string

    UserResponse:
      description: returns User
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/User"

    ListOfUsersResponse:
      description: "returns List<User>"
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/User"

    RichUserResponse:
      description: returns RichUser
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/RichUser"

    MemberResponse:
      description: returns Member
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Member"

    ListOfMembersResponse:
      description: "returns List<Member>"
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/Member"

    RichMemberResponse:
      description: returns RichMember
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/RichMember"

    FacilityResponse:
      description: "returns Facility"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Facility"

    ListOfFacilitiesResponse:
      description: "returns List<Facility>"
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/Facility"

    ListOfRichFacilitiesResponse:
      description: "returns List<RichFacility>"
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/RichFacility"

    OwnerResponse:
      description: "returns Owner"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Owner"

    ListOfOwnersResponse:
      description: "returns List<Owner>"
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/Owner"

    AttributeDefinitionResponse:
      description: "returns AttributeDefinition"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/AttributeDefinition"

    ListOfAttributeDefinitionsResponse:
      description: "returns List<Attribute>"
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/AttributeDefinition"

    AttributeResponse:
      description: "returns Attribute"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Attribute"

    ListOfAttributesResponse:
      description: "returns List<Attribute>"
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/Attribute"

    GroupResponse:
      description: "returns Group"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Group"

    RichGroupResponse:
      description: "returns RichGroup"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/RichGroup"

    ListOfGroupsResponse:
      description: "returns List<Group>"
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/Group"

    ListOfRichGroupsResponse:
      description: "returns List<RichGroup>"
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/RichGroup"

    ResourceResponse:
      description: "returns Resource"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Resource"

    ListOfResourcesResponse:
      description: "returns List<Resource>"
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/Resource"

    ResourceTagResponse:
      description: "returns ResourceTag"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ResourceTag"

    ListOfResourceTagsResponse:
      description: "returns List<ResourceTag>"
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/ResourceTag"

    RichResourceResponse:
      description: "returns RichResource"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/RichResource"

    ListOfRichResourcesResponse:
      description: "returns List<RichResource>"
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/RichResource"

    VoResponse:
      description: "returns Vo"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Vo"

    ListOfVosResponse:
      description: "returns List<Vo>"
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/Vo"

    ExtSourceResponse:
      description: "returns ExtSource"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ExtSource"

    ListOfExtSourcesResponse:
      description: "returns List<ExtSource>"
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/ExtSource"

    ListOfUserExtSourcesResponse:
      description: "returns List<UserExtSource>"
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/UserExtSource"

    ApplicationFormResponse:
      description: "returns ApplicationForm"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ApplicationForm"

    ServiceResponse:
      description: "returns Service"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Service"

    ListOfServicesResponse:
      description: "returns List<Service>"
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/Service"

    HostResponse:
      description: "returns Host"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Host"

    ListOfHostsResponse:
      description: "returns List<Host>"
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/Host"

    DestinationResponse:
      description: "returns Destination"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Destination"

    ListOfDestinationsResponse:
      description: "returns List<Destination>"
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/Destination"

    ListOfRichDestinationsResponse:
      description: "returns List<RichDestination>"
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/RichDestination"

  #####################################################
  #                                                   #
  # PARAMETERS - definitions of often used parameters #
  #                                                   #
  #####################################################
  parameters:
    id:
      name: id
      description: numeric id
      schema:
        type: integer
      in: query
      required: true

    attributeId:
      name: attributeId
      description: "id of AttributeDefinition"
      schema:
        type: integer
      in: query
      required: true

    attributeInteger:
      name: attribute
      description: "id of AttributeDefinition"
      schema:
        type: integer
      in: query
      required: true

    attributeDefinitionId:
      name: attributeDefinition
      description: "id of AttributeDefinition"
      schema:
        type: integer
      in: query
      required: true

    attributes:
      name: "attributes[]"
      description: "list of attribute ids List<Integer>"
      in: query
      required: true
      schema:
        type: array
        items:
          type: integer

    attributeName:
      name: attributeName
      description: "full name of attribute definition (namespace + ':' + friendlyName)"
      schema:
        type: string
      in: query
      required: true

    attrName:
      name: attrName
      description: "full name of attribute definition (namespace + ':' + friendlyName)"
      schema:
        type: string
      in: query
      required: true

    attrNames:
      name: "attrNames[]"
      description: "list of attribute names List<String>"
      in: query
      required: true
      schema:
        type: array
        items:
          type: string

    attributeValue:
      name: attributeValue
      description: "string value of Attribute"
      schema:
        type: string
      in: query
      required: true

    facilityId:
      name: facility
      description: "id of Facility"
      schema:
        type: integer
      in: query
      required: true

    userId:
      name: user
      description: "id of User"
      schema:
        type: integer
      in: query
      required: true

    memberId:
      name: member
      description: "id of Member"
      schema:
        type: integer
      in: query
      required: true

    voId:
      name: vo
      description: "id of Vo"
      schema:
        type: integer
      in: query
      required: true

    groupId:
      name: group
      description: "id of Group"
      schema:
        type: integer
      in: query
      required: true

    groupIds:
      name: "groups[]"
      description: "list of Group ids List<Integer>"
      in: query
      required: true
      schema:
        type: array
        items:
          type: integer

    resourceId:
      name: resource
      description: "id of Resource"
      schema:
        type: integer
      in: query
      required: true

    resourceIds:
      name: "resources[]"
      description: "list of Resource ids List<Integer>"
      in: query
      required: true
      schema:
        type: array
        items:
          type: integer

    userExtSourceId:
      name: userExtSource
      description: "id of UserExtSource"
      schema:
        type: integer
      in: query
      required: true

    hostId:
      name: host
      description: "id of Host"
      schema:
        type: integer
      in: query
      required: true

    hostnames:
      name: "hostnames[]"
      description: "list of host names List<String>"
      in: query
      required: true
      schema:
        type: array
        items:
          type: string

    listOfHostIds:
      name: "hosts[]"
      description: "list of host ids List<Integer>"
      in: query
      required: true
      schema:
        type: array
        items:
          type: integer

    destinationId:
      name: destination
      description: "id of Destination"
      schema:
        type: integer
      in: query
      required: true

    destinationName:
      name: destination
      description: "string name of destination"
      schema:
        type: string
      in: query
      required: true

    ownerId:
      name: owner
      description: "id of Owner"
      schema:
        type: integer
      in: query
      required: true

    serviceId:
      name: service
      description: "id of Service"
      schema:
        type: integer
      in: query
      required: true

    servicesPackageId:
      name: servicesPackage
      description: "id of ServicesPackage"
      schema:
        type: integer
      in: query
      required: true

    workWithUserAttributes:
      name: workWithUserAttributes
      description: "flag to work with user attributes"
      schema:
        type: boolean
      in: query
      required: true

    workWithGroupAttributes:
      name: workWithGroupAttributes
      description: "flag to work with group attributes"
      schema:
        type: boolean
      in: query
      required: true

#################################################
#                                               #
# TAGS - documentation for groups of operations #
#                                               #
#################################################

tags:
  - name: AuthzResolver
    description: AuthzResolver RPC API in Perun
    externalDocs:
      url: https://perun-aai.org/documentation/technical-documentation/rpc-api/rpc-javadoc-AuthzResolver.html
  - name: UsersManager
    description: UsersManager RPC API in Perun
    externalDocs:
      url: https://perun-aai.org/documentation/technical-documentation/rpc-api/rpc-javadoc-UsersManager.html
  - name: MembersManager
    description: MembersManager RPC API in Perun
    externalDocs:
      url: https://perun-aai.org/documentation/technical-documentation/rpc-api/rpc-javadoc-MembersManager.html
  - name: FacilitiesManager
    description: FacilitiesManager RPC API in Perun
    externalDocs:
      url: https://perun-aai.org/documentation/technical-documentation/rpc-api/rpc-javadoc-FacilitiesManager.html
  - name: OwnersManager
    description: OwnersManager RPC API in Perun
    externalDocs:
      url: https://perun-aai.org/documentation/technical-documentation/rpc-api/rpc-javadoc-OwnersManager.html
  - name: AttributesManager
    description: AttributesManager RPC API in Perun
    externalDocs:
      url: https://perun-aai.org/documentation/technical-documentation/rpc-api/rpc-javadoc-AttributesManager.html
  - name: GroupsManager
    description: GroupsManager RPC API in Perun
    externalDocs:
      url: https://perun-aai.org/documentation/technical-documentation/rpc-api/rpc-javadoc-GroupsManager.html
  - name: ResourcesManager
    description: ResourcesManager RPC API in Perun
    externalDocs:
      url: https://perun-aai.org/documentation/technical-documentation/rpc-api/rpc-javadoc-ResourcesManager.html
  - name: VosManager
    description: VosManager RPC API in Perun
    externalDocs:
      url: https://perun-aai.org/documentation/technical-documentation/rpc-api/rpc-javadoc-VosManager.html


#################################################
#                                               #
# PATHS - URLs of RPC operations                #
#                                               #
#################################################
paths:

  #################################################
  #                                               #
  # Utils                                         #
  #                                               #
  #################################################

  /:
    get:
      tags:
        - Utils
      operationId: getPerunRPCVersion
      summary: Gets Perun runtime status
      responses:
        200:
          description: OK
          content:
            text/plain:
              schema:
                type: string
                example: "OK! Version: 3.8.6, User: makub@META, extSource: META"

  /json/utils/getPerunStatus:
    get:
      tags:
        - Utils
      operationId: getPerunStatus
      summary: Gets Perun runtime status
      description: |
        Returns list of strings which looks like this
        "Version of Perun: 3.8.6",
        "Version of PerunDB: 3.1.55",
        "Version of Servlet: Apache Tomcat/9.0.16 (Debian)",
        "Version of DB-driver: PostgreSQL JDBC Driver-42.2.8",
        "Version of DB: PostgreSQL-12.0 (Debian 12.0-2.pgdg100+1)",
        "Version of Java platform: 11.0.5",
        "AuditerConsumer: '127.0.0.1:6071' with last processed id='23463958'",
        "AuditerConsumer: 'ldapcConsumer' with last processed id='23463958'",
        "AuditerConsumer: 'notifications' with last processed id='23463952'",
        "LastMessageId: 23463958",
        "Timestamp: 2019-11-14 10:12:30.99"
      responses:
        200:
          $ref: '#/components/responses/ListOfStringsResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/utils/getPerunStatistics:
    get:
      tags:
        - Utils
      operationId: getPerunStatistics
      summary: Gets Perun runtime statistics
      description: |
        Returns list of strings which looks like this
        "Timestamp: '2019-11-14 10:46:39.613'",
        "USERS: '39927'",
        "FACILITIES: '552'",
        "DESTINATIONS: '2568'",
        "VOS: '341'",
        "RESOURCES: '2560'",
        "GROUPS: '2300'",
        "AUDITMESSAGES: '7333237'"
      responses:
        200:
          $ref: '#/components/responses/ListOfStringsResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/utils/getPerunSystemTimeInMillis:
    get:
      tags:
        - Utils
      operationId: getPerunSystemTimeInMillis
      summary: Gets Perun system time in milliseconds since the epoch
      responses:
        200:
          $ref: '#/components/responses/LongResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/utils/getGuiConfiguration:
    get:
      tags:
        - Utils
      operationId: getGuiConfiguration
      summary: Gets perun-web-gui.properties as Map<String,String>
      responses:
        200:
          $ref: '#/components/responses/MapStringStringResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  #################################################
  #                                               #
  # AuthzResolver                                 #
  #                                               #
  #################################################

  /json/authzResolver/getPerunPrincipal:
    get:
      tags:
        - AuthzResolver
      operationId: getPerunPrincipal
      summary: Gets current user
      description: Returns object representing the currently authenticated user.
      responses:
        200:
          description: successfully returned authenticated user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PerunPrincipal"
        default:
          $ref: '#/components/responses/ExceptionResponse'

  #################################################
  #                                               #
  # AttributesManager                             #
  #                                               #
  #################################################


  /json/attributesManager/getAttributes/f-r-u-m:
    get:
      tags:
        - AttributesManager
      operationId: getFacilityResourceUserMemberAttributes
      summary: Get all non-empty member, user, member-resource and user-facility attributes.
      parameters:
        - $ref: '#/components/parameters/facilityId'
        - $ref: '#/components/parameters/resourceId'
        - $ref: '#/components/parameters/userId'
        - $ref: '#/components/parameters/memberId'
      responses:
        200:
          $ref: '#/components/responses/ListOfAttributesResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/attributesManager/getAttributes/f-u:
    get:
      tags:
        - AttributesManager
      operationId: getFacilityUserAttributes
      summary: Get all non-empty attributes associated with the user on the facility.
      externalDocs:
        url: https://perun-aai.org/documentation/technical-documentation/rpc-api/rpc-javadoc-AttributesManager.html#AttributesManagergetAttributes1
      parameters:
        - $ref: '#/components/parameters/facilityId'
        - $ref: '#/components/parameters/userId'
      responses:
        200:
          $ref: '#/components/responses/ListOfAttributesResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/attributesManager/getAttributes/f-names:
    get:
      tags:
        - AttributesManager
      operationId: getFacilityAttributesByNames
      summary: Returns all specified Facility attributes for selected Facility.
      externalDocs:
        url: https://perun-aai.org/documentation/technical-documentation/rpc-api/rpc-javadoc-AttributesManager.html#AttributesManagergetAttributes3
      parameters:
        - $ref: '#/components/parameters/facilityId'
        - $ref: '#/components/parameters/attrNames'
      responses:
        200:
          $ref: '#/components/responses/ListOfAttributesResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/attributesManager/getAttributes/f:
    get:
      tags:
        - AttributesManager
      operationId: getFacilityAttributes
      summary: Returns all non-empty Facility attributes for selected Facility.
      externalDocs:
        url: https://perun-aai.org/documentation/technical-documentation/rpc-api/rpc-javadoc-AttributesManager.html#AttributesManagergetAttributes2
      parameters:
        - $ref: '#/components/parameters/facilityId'
      responses:
        200:
          $ref: '#/components/responses/ListOfAttributesResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/attributesManager/getAttributes/vo-names:
    get:
      tags:
        - AttributesManager
      operationId: getVoAttributesByNames
      summary: Get all attributes associated with the vo which have name in list attrNames (empty too).
      externalDocs:
        url: https://perun-aai.org/documentation/technical-documentation/rpc-api/rpc-javadoc-AttributesManager.html#AttributesManagergetAttributes5
      parameters:
        - $ref: '#/components/parameters/voId'
        - $ref: '#/components/parameters/attrNames'
      responses:
        200:
          $ref: '#/components/responses/ListOfAttributesResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/attributesManager/getAttributes/vo:
    get:
      tags:
        - AttributesManager
      operationId: getVoAttributes
      summary: Get all attributes associated with the vo.
      externalDocs:
        url: https://perun-aai.org/documentation/technical-documentation/rpc-api/rpc-javadoc-AttributesManager.html#AttributesManagergetAttributes4
      parameters:
        - $ref: '#/components/parameters/voId'
      responses:
        200:
          $ref: '#/components/responses/ListOfAttributesResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/attributesManager/getAttributes/m-r-names-wu:
    get:
      tags:
        - AttributesManager
      operationId: getMemberResourceAndUserFacilityAttributesByNames
      description: |
        Gets selected non-empty attributes associated with the member and the resource.
        It returns member and member-resource attributes and also user and user-facility attributes if
        workWithUserAttributes is true.
        Attributes are selected by list of attr_names. Empty list means all attributes.
      externalDocs:
        url: https://perun-aai.org/documentation/technical-documentation/rpc-api/rpc-javadoc-AttributesManager.html#AttributesManagergetAttributes9
      parameters:
        - $ref: '#/components/parameters/memberId'
        - $ref: '#/components/parameters/resourceId'
        - $ref: '#/components/parameters/attrNames'
        - $ref: '#/components/parameters/workWithUserAttributes'
      responses:
        200:
          $ref: '#/components/responses/ListOfAttributesResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/attributesManager/getAttributes/m-r-wu:
    get:
      tags:
        - AttributesManager
      operationId: getMemberResourceAndUserFacilityAttributes
      description: |
        Gets all non-empty attributes associated with the member on the resource and if workWithUserAttributes is
        true, gets also all non-empty user, user-facility and member attributes.
      externalDocs:
        url: https://perun-aai.org/documentation/technical-documentation/rpc-api/rpc-javadoc-AttributesManager.html#AttributesManagergetAttributes8
      parameters:
        - $ref: '#/components/parameters/memberId'
        - $ref: '#/components/parameters/resourceId'
        - $ref: '#/components/parameters/workWithUserAttributes'
      responses:
        200:
          $ref: '#/components/responses/ListOfAttributesResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/attributesManager/getAttributes/r-g-m-names:
    get:
      tags:
        - AttributesManager
      operationId: getResourceGroupMemberAttributesByNames
      description: |
        Get all attributes by the list of attrNames if they are in one of these namespaces:
        - member
        - group
        - member-group
        - resource
        - member-resource
        - group-resource
        - user (get from member object)
        - facility (get from resource object)
        - user-facility
        Returns all attributes even if they are empty or virtual.
      externalDocs:
        url: https://perun-aai.org/documentation/technical-documentation/rpc-api/rpc-javadoc-AttributesManager.html#AttributesManagergetAttributes11
      parameters:
        - $ref: '#/components/parameters/resourceId'
        - $ref: '#/components/parameters/groupId'
        - $ref: '#/components/parameters/memberId'
        - $ref: '#/components/parameters/attrNames'
      responses:
        200:
          $ref: '#/components/responses/ListOfAttributesResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/attributesManager/getAttributes/m-r:
    get:
      tags:
        - AttributesManager
      operationId: getMemberResourceAttributes
      summary: Get all non-empty attributes associated with the member on the resource.
      externalDocs:
        url: https://perun-aai.org/documentation/technical-documentation/rpc-api/rpc-javadoc-AttributesManager.html#AttributesManagergetAttributes10
      parameters:
        - $ref: '#/components/parameters/memberId'
        - $ref: '#/components/parameters/resourceId'
      responses:
        200:
          $ref: '#/components/responses/ListOfAttributesResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/attributesManager/getAttributes/r-g-names-wg:
    get:
      tags:
        - AttributesManager
      operationId: getResourceGroupAndGroupAttributesByNames
      description: |
        Get all attributes associated with the group and the resource which have their name in list attrNames (empty too).
        Virtual attributes too.
        If workWithGroupAttributes is true, return also all group attributes in list of attrNames (with virtual attributes too).
      externalDocs:
        url: https://perun-aai.org/documentation/technical-documentation/rpc-api/rpc-javadoc-AttributesManager.html#AttributesManagergetAttributes14
      parameters:
        - $ref: '#/components/parameters/resourceId'
        - $ref: '#/components/parameters/groupId'
        - $ref: '#/components/parameters/attrNames'
        - $ref: '#/components/parameters/workWithGroupAttributes'
      responses:
        200:
          $ref: '#/components/responses/ListOfAttributesResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/attributesManager/getAttributes/r-g-wg:
    get:
      tags:
        - AttributesManager
      operationId: getResourceGroupAndGroupAttributes
      description: |
        Get all non-empty attributes associated with the group and resource. Virtual attributes too.
        If workWithGroupAttributes is true, return also all group attributes.
      externalDocs:
        url: https://perun-aai.org/documentation/technical-documentation/rpc-api/rpc-javadoc-AttributesManager.html#AttributesManagergetAttributes13
      parameters:
        - $ref: '#/components/parameters/resourceId'
        - $ref: '#/components/parameters/groupId'
        - $ref: '#/components/parameters/workWithGroupAttributes'
      responses:
        200:
          $ref: '#/components/responses/ListOfAttributesResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/attributesManager/getAttributes/r-g:
    get:
      tags:
        - AttributesManager
      operationId: getResourceGroupAttributes
      summary: Get all non-empty attributes associated with the group on resource.
      externalDocs:
        url: https://perun-aai.org/documentation/technical-documentation/rpc-api/rpc-javadoc-AttributesManager.html#AttributesManagergetAttributes12
      parameters:
        - $ref: '#/components/parameters/resourceId'
        - $ref: '#/components/parameters/groupId'
      responses:
        200:
          $ref: '#/components/responses/ListOfAttributesResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/attributesManager/getAttributes/r-names:
    get:
      tags:
        - AttributesManager
      operationId: getResourceAttributesByNames
      description: |
        Get all attributes associated with the resource which have name in list attrNames (empty too).
        Virtual attributes too.
      externalDocs:
        url: https://perun-aai.org/documentation/technical-documentation/rpc-api/rpc-javadoc-AttributesManager.html#AttributesManagergetAttributes16
      parameters:
        - $ref: '#/components/parameters/resourceId'
        - $ref: '#/components/parameters/attrNames'
      responses:
        200:
          $ref: '#/components/responses/ListOfAttributesResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/attributesManager/getAttributes/r:
    get:
      tags:
        - AttributesManager
      operationId: getResourceAttributes
      summary: Get all non-empty attributes associated with the resource.
      externalDocs:
        url: https://perun-aai.org/documentation/technical-documentation/rpc-api/rpc-javadoc-AttributesManager.html#AttributesManagergetAttributes15
      parameters:
        - $ref: '#/components/parameters/resourceId'
      responses:
        200:
          $ref: '#/components/responses/ListOfAttributesResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/attributesManager/getAttributes/m-g-names-wu:
    get:
      tags:
        - AttributesManager
      operationId: getMemberGroupAndUserAttributesByNames
      description: |
        Get all attributes associated with the member in the group which have name in list attrNames (empty too).
        If workWithUserAttribute is true, return also all user attributes in list of attrNames (with virtual attributes too).
      externalDocs:
        url: https://perun-aai.org/documentation/technical-documentation/rpc-api/rpc-javadoc-AttributesManager.html#AttributesManagergetAttributes17
      parameters:
        - $ref: '#/components/parameters/memberId'
        - $ref: '#/components/parameters/groupId'
        - $ref: '#/components/parameters/attrNames'
        - $ref: '#/components/parameters/workWithUserAttributes'
      responses:
        200:
          $ref: '#/components/responses/ListOfAttributesResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/attributesManager/getAttributes/m-names-wu:
    get:
      tags:
        - AttributesManager
      operationId: getMemberAndUserAttributesByNames
      description: |
        Get all attributes associated with the member which have name in list attrNames (empty too).
        Virtual attributes too.
        If workWithUserAttribute is true, return also all user attributes in list of attrNames (with virtual attributes too).
      parameters:
        - $ref: '#/components/parameters/memberId'
        - $ref: '#/components/parameters/attrNames'
        - $ref: '#/components/parameters/workWithUserAttributes'
      responses:
        200:
          $ref: '#/components/responses/ListOfAttributesResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/attributesManager/getAttributes/m-wu:
    get:
      tags:
        - AttributesManager
      operationId: getMemberAndUserAttributes
      description: |
        Get all non-empty attributes associated with the member and if workWithUserAttributes is
        true, get all non-empty attributes associated with user, who is this member.
      externalDocs:
        url: https://perun-aai.org/documentation/technical-documentation/rpc-api/rpc-javadoc-AttributesManager.html#AttributesManagergetAttributes19
      parameters:
        - $ref: '#/components/parameters/memberId'
        - $ref: '#/components/parameters/workWithUserAttributes'
      responses:
        200:
          $ref: '#/components/responses/ListOfAttributesResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/attributesManager/getAttributes/m-g-names:
    get:
      tags:
        - AttributesManager
      operationId: getMemberGroupAttributesByNames
      description: |
        Get all attributes (empty and virtual too)associated with the member in the group which have name in list attrNames.
      externalDocs:
        url: https://perun-aai.org/documentation/technical-documentation/rpc-api/rpc-javadoc-AttributesManager.html#AttributesManagergetAttributes20
      parameters:
        - $ref: '#/components/parameters/memberId'
        - $ref: '#/components/parameters/groupId'
        - $ref: '#/components/parameters/attrNames'
      responses:
        200:
          $ref: '#/components/responses/ListOfAttributesResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/attributesManager/getAttributes/m-names:
    get:
      tags:
        - AttributesManager
      operationId: getMemberAttributesByNames
      description: |
        Get all attributes associated with the member which have name in list attrNames (empty too).
        Virtual attribute too.
      externalDocs:
        url: https://perun-aai.org/documentation/technical-documentation/rpc-api/rpc-javadoc-AttributesManager.html#AttributesManagergetAttributes21
      parameters:
        - $ref: '#/components/parameters/memberId'
        - $ref: '#/components/parameters/attrNames'
      responses:
        200:
          $ref: '#/components/responses/ListOfAttributesResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/attributesManager/getAttributes/m-g:
    get:
      tags:
        - AttributesManager
      operationId: getMemberGroupAttributes
      description: |
        Get all non-empty attributes associated with the member in the group.
      externalDocs:
        url: https://perun-aai.org/documentation/technical-documentation/rpc-api/rpc-javadoc-AttributesManager.html#AttributesManagergetAttributes22
      parameters:
        - $ref: '#/components/parameters/memberId'
        - $ref: '#/components/parameters/groupId'
      responses:
        200:
          $ref: '#/components/responses/ListOfAttributesResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/attributesManager/getAttributes/m:
    get:
      tags:
        - AttributesManager
      operationId: getMemberAttributes
      description: |
        Get all non-empty attributes associated with the member.
      externalDocs:
        url: https://perun-aai.org/documentation/technical-documentation/rpc-api/rpc-javadoc-AttributesManager.html#AttributesManagergetAttributes18
      parameters:
        - $ref: '#/components/parameters/memberId'
      responses:
        200:
          $ref: '#/components/responses/ListOfAttributesResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/attributesManager/getAttributes/u-names:
    get:
      tags:
        - AttributesManager
      operationId: getUserAttributesByNames
      description: |
        Get all attributes associated with the user which have name in list attrNames (empty too).
      externalDocs:
        url: https://perun-aai.org/documentation/technical-documentation/rpc-api/rpc-javadoc-AttributesManager.html#AttributesManagergetAttributes24
      parameters:
        - $ref: '#/components/parameters/userId'
        - $ref: '#/components/parameters/attrNames'
      responses:
        200:
          $ref: '#/components/responses/ListOfAttributesResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/attributesManager/getAttributes/u:
    get:
      tags:
        - AttributesManager
      operationId: getUserAttributes
      description: |
        Get all non-empty attributes associated with the user.
      externalDocs:
        url: https://perun-aai.org/documentation/technical-documentation/rpc-api/rpc-javadoc-AttributesManager.html#AttributesManagergetAttributes23
      parameters:
        - $ref: '#/components/parameters/userId'
      responses:
        200:
          $ref: '#/components/responses/ListOfAttributesResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/attributesManager/getAttributes/g-names:
    get:
      tags:
        - AttributesManager
      operationId: getGroupAttributesByNames
      description: |
        Get all attributes associated with the group which have name in list attrNames (empty too).
        Virtual attribute too.
      externalDocs:
        url: https://perun-aai.org/documentation/technical-documentation/rpc-api/rpc-javadoc-AttributesManager.html#AttributesManagergetAttributes26
      parameters:
        - $ref: '#/components/parameters/groupId'
        - $ref: '#/components/parameters/attrNames'
      responses:
        200:
          $ref: '#/components/responses/ListOfAttributesResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/attributesManager/getAttributes/g:
    get:
      tags:
        - AttributesManager
      operationId: getGroupAttributes
      description: |
        Get all non-empty attributes associated with the group.
      externalDocs:
        url: https://perun-aai.org/documentation/technical-documentation/rpc-api/rpc-javadoc-AttributesManager.html#AttributesManagergetAttributes25
      parameters:
        - $ref: '#/components/parameters/groupId'
      responses:
        200:
          $ref: '#/components/responses/ListOfAttributesResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/attributesManager/getAttributes/h:
    get:
      tags:
        - AttributesManager
      operationId: getHostAttributes
      description: |
        Get all non-empty attributes associated with the host.
      externalDocs:
        url: https://perun-aai.org/documentation/technical-documentation/rpc-api/rpc-javadoc-AttributesManager.html#AttributesManagergetAttributes27
      parameters:
        - $ref: '#/components/parameters/hostId'
      responses:
        200:
          $ref: '#/components/responses/ListOfAttributesResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/attributesManager/getAttributes/key:
    get:
      tags:
        - AttributesManager
      operationId: getEntitylessAttributesByKey
      description: |
        Get all entityless attributes with subject equaled String key.
      externalDocs:
        url: https://perun-aai.org/documentation/technical-documentation/rpc-api/rpc-javadoc-AttributesManager.html#AttributesManagergetAttributes28
      parameters:
        - { name: key, description: "key for entityless attributes", schema: { type: string },  in: query, required: true }
      responses:
        200:
          $ref: '#/components/responses/ListOfAttributesResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/attributesManager/getAttributes/ues-names:
    get:
      tags:
        - AttributesManager
      operationId: getUserExtSourceAttributesByNames
      description: |
        Get all attributes associated with the userExtSource which have name in list attrNames (empty too).
      externalDocs:
        url: https://perun-aai.org/documentation/technical-documentation/rpc-api/rpc-javadoc-AttributesManager.html#AttributesManagergetAttributes7
      parameters:
        - $ref: '#/components/parameters/userExtSourceId'
        - $ref: '#/components/parameters/attrNames'
      responses:
        200:
          $ref: '#/components/responses/ListOfAttributesResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/attributesManager/getAttributes/ues:
    get:
      tags:
        - AttributesManager
      operationId: getUserExtSourceAttributes
      description: |
        Get all non-empty attributes associated with the UserExtSource.
      externalDocs:
        url: https://perun-aai.org/documentation/technical-documentation/rpc-api/rpc-javadoc-AttributesManager.html#AttributesManagergetAttributes6
      parameters:
        - $ref: '#/components/parameters/userExtSourceId'
      responses:
        200:
          $ref: '#/components/responses/ListOfAttributesResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/attributesManager/getEntitylessAttributes:
    get:
      tags:
        - AttributesManager
      operationId: getEntitylessAttributesByName
      summary: Returns all entityless attributes with attrName.
      parameters:
        - $ref: '#/components/parameters/attrName'
      responses:
        200:
          $ref: '#/components/responses/ListOfAttributesResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/attributesManager/getEntitylessKeys:
    get:
      tags:
        - AttributesManager
      operationId: getEntitylessKeys
      summary: Returns list of Keys which fits the attributeDefinition.
      parameters:
        - $ref: '#/components/parameters/attributeDefinitionId'
      responses:
        200:
          $ref: '#/components/responses/ListOfStringsResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/attributesManager/setAttributes/f-r-g-u-m:
    post:
      tags:
        - AttributesManager
      operationId: setFacilityResourceGroupUserMemberAttributes
      description: |
        Store the member, user, member-group, member-resource and user-facility attributes.
        If an attribute is core attribute then the attribute isn't stored (It's skipped without any notification).
        Group and group-resource attributes are not supported in this context.
      responses:
        200:
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              title: InputSetFacilityResourceGroupUserMemberAttributes
              description: "input to setFacilityResourceGroupUserMemberAttributes"
              type: object
              required:
                - facility
                - resource
                - group
                - user
                - member
                - attributes
              properties:
                facility: { type: integer, description: "facility id", nullable: false }
                resource: { type: integer, description: "resource id", nullable: false }
                group: { type: integer, description: "group id", nullable: false }
                user: { type: integer, description: "user id", nullable: false }
                member: { type: integer, description: "member id", nullable: false }
                attributes:
                 type: array
                 nullable: false
                 items:
                   $ref: '#/components/schemas/Attribute'

  /json/attributesManager/setAttributes/f-r-u-m:
    post:
      tags:
        - AttributesManager
      operationId: setFacilityResourceUserMemberAttributes
      description: |
        Store the member, user, member-resource and user-facility attributes.
        If an attribute is core attribute then the attribute isn't stored (It's skipped without any notification).
      responses:
        200:
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              title: InputSetFacilityResourceUserMemberAttributes
              description: "input to setFacilityResourceUserMemberAttributes"
              type: object
              properties:
                facility: { type: integer, description: "facility id", nullable: false }
                resource: { type: integer, description: "resource id", nullable: false }
                user: { type: integer, description: "user id", nullable: false }
                member: { type: integer, description: "member id", nullable: false }
                attributes:
                  type: array
                  nullable: false
                  items:
                    $ref: '#/components/schemas/Attribute'

  /json/attributesManager/setAttributes/f-u:
    post:
      tags:
        - AttributesManager
      operationId: setFacilityUserAttributes
      description: |
        Store the attributes associated with the facility and user combination.
        If an attribute is core attribute then the attribute isn't stored (It's skipped without any notification).
      responses:
        200:
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              title: InputSetFacilityUserAttributes
              description: "input to setFacilityUserAttributes"
              type: object
              properties:
                facility: { type: integer, description: "facility id", nullable: false }
                user: { type: integer, description: "user id", nullable: false }
                attributes:
                  type: array
                  nullable: false
                  items:
                    $ref: '#/components/schemas/Attribute'

  /json/attributesManager/setAttributes/f:
    post:
      tags:
        - AttributesManager
      operationId: setFacilityAttributes
      description: |
        Store the attributes associated with the facility.
        If an attribute is core attribute then the attribute isn't stored (It's skipped without any notification).
      responses:
        200:
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              title: InputSetFacilityAttributes
              description: "input to setFacilityAttributes"
              type: object
              properties:
                facility: { type: integer, description: "facility id", nullable: false }
                attributes:
                  type: array
                  nullable: false
                  items:
                    $ref: '#/components/schemas/Attribute'

  /json/attributesManager/setAttributes/vo:
    post:
      tags:
        - AttributesManager
      operationId: setVoAttributes
      description: |
        Store the attributes associated with the vo.
        If an attribute is core attribute then the attribute isn't stored (It's skipped without any notification).
      responses:
        200:
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              title: InputSetVoAttributes
              description: "input to setVoAttributes"
              type: object
              properties:
                vo: { type: integer, description: "vo id", nullable: false }
                attributes:
                  type: array
                  nullable: false
                  items:
                    $ref: '#/components/schemas/Attribute'

  /json/attributesManager/setAttributes/m-r-wu:
    post:
      tags:
        - AttributesManager
      operationId: setMemberResourceAndUserAttributes
      description: |
        Store the attributes associated with the resource and member combination.
        If an attribute is core attribute then the attribute isn't stored (It's skipped without any notification).
        If workWithUserAttributes is true, the method stores also the attributes associated with user, user-facility and member.
      responses:
        200:
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              title: InputSetMemberResourceAndUserAttributes
              description: "input to setMemberResourceAndUserAttributes"
              type: object
              required:
                - member
                - resource
                - attributes
                - workWithUserAttributes
              properties:
                member: { type: integer, description: "member id", nullable: false }
                resource: { type: integer, description: "resource id", nullable: false }
                attributes:
                  type: array
                  nullable: false
                  items:
                    $ref: '#/components/schemas/Attribute'
                workWithUserAttributes: { type: boolean }

  /json/attributesManager/setAttributes/m-r:
    post:
      tags:
        - AttributesManager
      operationId: setMemberResourceAttributes
      description: |
        Store the attributes associated with the resource and member combination.
        If an attribute is core attribute then the attribute isn't stored (It's skipped without any notification).
      responses:
        200:
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              title: InputSetMemberResourceAttributes
              description: "input to setMemberResourceAttributes"
              type: object
              required:
                - member
                - resource
                - attributes
              properties:
                member: { type: integer, description: "member id", nullable: false }
                resource: { type: integer, description: "resource id", nullable: false }
                attributes:
                  type: array
                  nullable: false
                  items:
                    $ref: '#/components/schemas/Attribute'

  /json/attributesManager/setAttributes/r-g-wg:
    post:
      tags:
        - AttributesManager
      operationId: setResourceGroupWithGroupAttributes
      description: |
        Store the attributes associated with group and resource, if workWithUserAttributes is true then also from group itself.
        If an attribute is core attribute then the attribute isn't stored (It's skipped without any notification).
      responses:
        200:
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              title: InputSetResourceGroupWithGroupAttributes
              description: "input to setResourceGroupWithGroupAttributes"
              type: object
              required:
                - resource
                - group
                - attributes
                - workWithGroupAttributes
              properties:
                resource: { type: integer, description: "resource id", nullable: false }
                group: { type: integer, description: "group id", nullable: false }
                attributes:
                  type: array
                  nullable: false
                  items:
                    $ref: '#/components/schemas/Attribute'
                workWithGroupAttributes: { type: boolean }

  /json/attributesManager/setAttributes/r-g:
    post:
      tags:
        - AttributesManager
      operationId: setResourceGroupAttributes
      description: |
        Store the attributes associated with the group on resource.
      responses:
        200:
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              title: InputSetResourceGroupAttributes
              description: "input to setResourceGroupAttributes"
              type: object
              required:
                - resource
                - group
                - attributes
              properties:
                resource: { type: integer, description: "resource id", nullable: false }
                group: { type: integer, description: "group id", nullable: false }
                attributes:
                  type: array
                  nullable: false
                  items:
                    $ref: '#/components/schemas/Attribute'

  /json/attributesManager/setAttributes/r:
    post:
      tags:
        - AttributesManager
      operationId: setResourceAttributes
      description: |
        Store the attributes associated with the resource.
      responses:
        200:
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              title: InputSetResourceAttributes
              description: "input to setResourceAttributes"
              type: object
              required:
                - resource
                - attributes
              properties:
                resource: { type: integer, description: "resource id", nullable: false }
                attributes:
                  type: array
                  nullable: false
                  items:
                    $ref: '#/components/schemas/Attribute'

  /json/attributesManager/setAttributes/m-g-wu:
    post:
      tags:
        - AttributesManager
      operationId: setMemberGroupWithUserAttributes
      description: |
        Store the attributes associated with the member and group combination.
        If an attribute is core attribute then the attribute isn't stored (It's skipped without any notification).
        If workWithUserAttributes is true, the method stores also the attributes associated with user and member.
      responses:
        200:
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              title: InputSetMemberGroupWithUserAttributes
              description: "input to setMemberGroupWithUserAttributes"
              type: object
              required:
                - member
                - group
                - attributes
                - workWithUserAttributes
              properties:
                member: { type: integer, description: "member id", nullable: false }
                group: { type: integer, description: "group id", nullable: false }
                attributes:
                  type: array
                  nullable: false
                  items:
                    $ref: '#/components/schemas/Attribute'
                workWithUserAttributes: { type: boolean }

  /json/attributesManager/setAttributes/m-wu:
    post:
      tags:
        - AttributesManager
      operationId: setMemberWithUserAttributes
      description: |
        Store the attributes associated with member and user (which we get from this member) if workWithUserAttributes is true.
      responses:
        200:
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              title: InputSetMemberWithUserAttributes
              description: "input to setMemberWithUserAttributes"
              type: object
              required:
                - member
                - attributes
                - workWithUserAttributes
              properties:
                member: { type: integer, description: "member id", nullable: false }
                attributes:
                  type: array
                  nullable: false
                  items:
                    $ref: '#/components/schemas/Attribute'
                workWithUserAttributes: { type: boolean }

  /json/attributesManager/setAttributes/m-g:
    post:
      tags:
        - AttributesManager
      operationId: setMemberGroupAttributes
      description: |
        Store the attributes associated with the member and group combination.
        If an attribute is core attribute then the attribute isn't stored (It's skipped without any notification).
      responses:
        200:
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              title: InputSetMemberGroupAttributes
              description: "input to setMemberGroupAttributes"
              type: object
              required:
                - member
                - group
                - attributes
              properties:
                member: { type: integer, description: "member id", nullable: false }
                group: { type: integer, description: "group id", nullable: false }
                attributes:
                  type: array
                  nullable: false
                  items:
                    $ref: '#/components/schemas/Attribute'

  /json/attributesManager/setAttributes/m:
    post:
      tags:
        - AttributesManager
      operationId: setMemberAttributes
      description: |
        Store the attributes associated with the member.
        If an attribute is core attribute then the attribute isn't stored (It's skipped without any notification).
      responses:
        200:
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              title: InputSetMemberAttributes
              description: "input to setMemberAttributes"
              type: object
              required:
                - member
                - attributes
              properties:
                member: { type: integer, description: "member id", nullable: false }
                attributes:
                  type: array
                  nullable: false
                  items:
                    $ref: '#/components/schemas/Attribute'

  /json/attributesManager/setAttributes/u:
    post:
      tags:
        - AttributesManager
      operationId: setUserAttributes
      description: |
        Store the attributes associated with the user.
        If an attribute is core attribute then the attribute isn't stored (It's skipped without any notification).
      responses:
        200:
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              title: InputSetUserAttributes
              description: "input to setUserAttributes"
              type: object
              required:
                - user
                - attributes
              properties:
                user: { type: integer, description: "user id", nullable: false }
                attributes:
                  type: array
                  nullable: false
                  items:
                    $ref: '#/components/schemas/Attribute'

  /json/attributesManager/setAttributes/g:
    post:
      tags:
        - AttributesManager
      operationId: setGroupAttributes
      description: |
        Store the attributes associated with the group.
        If an attribute is core attribute then the attribute isn't stored (It's skipped without any notification).
      responses:
        200:
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              title: InputSetGroupAttributes
              description: "input to setGroupAttributes"
              type: object
              required:
                - group
                - attributes
              properties:
                group: { type: integer, description: "group id", nullable: false }
                attributes:
                  type: array
                  nullable: false
                  items:
                    $ref: '#/components/schemas/Attribute'

  /json/attributesManager/setAttributes/h:
    post:
      tags:
        - AttributesManager
      operationId: setHostAttributes
      description: |
        Store the attributes associated with the host.
        If an attribute is core attribute then the attribute isn't stored (It's skipped without any notification).
      responses:
        200:
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              title: InputSetHostAttributes
              description: "input to setHostAttributes"
              type: object
              required:
                - host
                - attributes
              properties:
                host: { type: integer, description: "host id", nullable: false }
                attributes:
                  type: array
                  nullable: false
                  items:
                    $ref: '#/components/schemas/Attribute'

  /json/attributesManager/setAttributes/ues:
    post:
      tags:
        - AttributesManager
      operationId: setUserExtSourceAttributes
      description: |
        Store the attributes associated with the UserExtSource.
        If an attribute is core attribute then the attribute isn't stored (It's skipped without any notification).
      responses:
        200:
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              title: InputSetUserExtSourceAttributes
              description: "input to setUserExtSourceAttributes"
              type: object
              required:
                - userExtSource
                - attributes
              properties:
                userExtSource: { type: integer, description: "userExtSource id", nullable: false }
                attributes:
                  type: array
                  nullable: false
                  items:
                    $ref: '#/components/schemas/Attribute'

  /json/attributesManager/getAttribute/name-facility:
    get:
      tags:
        - AttributesManager
      operationId: getFacilityAttributeByName
      summary: Returns a facility Attribute by its name.
      description: This is an overloaded method getAttribute, specialized for facility and attribute name.
      parameters:
        - $ref: '#/components/parameters/facilityId'
        - $ref: '#/components/parameters/attributeName'
      responses:
        200:
          $ref: '#/components/responses/AttributeResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/attributesManager/getAttribute/id-facility:
    get:
      tags:
        - AttributesManager
      operationId: getFacilityAttributeById
      summary: Returns a facility Attribute by its id.
      description: This is an overloaded method getAttribute, specialized for facility and attribute id.
      parameters:
        - $ref: '#/components/parameters/facilityId'
        - $ref: '#/components/parameters/attributeId'
      responses:
        200:
          $ref: '#/components/responses/AttributeResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/attributesManager/getAttribute/name-user:
    get:
      tags:
        - AttributesManager
      operationId: getUserAttributeByName
      summary: Returns a user Attribute by its name.
      description: This is an overloaded method getAttribute, specialized for user and attribute name.
      parameters:
        - $ref: '#/components/parameters/userId'
        - $ref: '#/components/parameters/attributeName'
      responses:
        200:
          $ref: '#/components/responses/AttributeResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/attributesManager/getAttribute/id-user:
    get:
      tags:
        - AttributesManager
      operationId: getUserAttributeById
      summary: Returns a user Attribute by its id.
      description: This is an overloaded method getAttribute, specialized for user and attribute id.
      parameters:
        - $ref: '#/components/parameters/userId'
        - $ref: '#/components/parameters/attributeId'
      responses:
        200:
          $ref: '#/components/responses/AttributeResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/attributesManager/getAttribute/name-user_facility:
    get:
      tags:
        - AttributesManager
      operationId: getUserFacilityAttributeByName
      summary: Returns a user_facility Attribute by its name.
      description: This is an overloaded method getAttribute, specialized for user, facility and attribute name.
      parameters:
        - $ref: '#/components/parameters/userId'
        - $ref: '#/components/parameters/facilityId'
        - $ref: '#/components/parameters/attributeName'
      responses:
        200:
          $ref: '#/components/responses/AttributeResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/attributesManager/getAttribute/id-user_facility:
    get:
      tags:
        - AttributesManager
      operationId: getUserFacilityAttributeById
      summary: Returns a user_facility Attribute by its id.
      description: This is an overloaded method getAttribute, specialized for user, facility and attribute id.
      parameters:
        - $ref: '#/components/parameters/userId'
        - $ref: '#/components/parameters/facilityId'
        - $ref: '#/components/parameters/attributeId'
      responses:
        200:
          $ref: '#/components/responses/AttributeResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/attributesManager/getAttribute/name-vo:
    get:
      tags:
        - AttributesManager
      operationId: getVoAttributeByName
      summary: Returns a Vo Attribute by its name.
      description: This is an overloaded method getAttribute, specialized for virtual organization and attribute name.
      parameters:
        - $ref: '#/components/parameters/voId'
        - $ref: '#/components/parameters/attributeName'
      responses:
        200:
          $ref: '#/components/responses/AttributeResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/attributesManager/getAttribute/id-vo:
    get:
      tags:
        - AttributesManager
      operationId: getVoAttributeById
      summary: Returns a Vo Attribute by its id.
      description: This is an overloaded method getAttribute, specialized for virtual organization and attribute id.
      parameters:
        - $ref: '#/components/parameters/voId'
        - $ref: '#/components/parameters/attributeId'
      responses:
        200:
          $ref: '#/components/responses/AttributeResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/attributesManager/getAttribute/name-member:
    get:
      tags:
        - AttributesManager
      operationId: getMemberAttributeByName
      summary: Returns a member Attribute by its name.
      description: This is an overloaded method getAttribute, specialized for member and attribute name.
      parameters:
        - $ref: '#/components/parameters/memberId'
        - $ref: '#/components/parameters/attributeName'
      responses:
        200:
          $ref: '#/components/responses/AttributeResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/attributesManager/getAttribute/id-member:
    get:
      tags:
        - AttributesManager
      operationId: getMemberAttributeById
      summary: Returns a member Attribute by its id.
      description: This is an overloaded method getAttribute, specialized for member and attribute id.
      parameters:
        - $ref: '#/components/parameters/memberId'
        - $ref: '#/components/parameters/attributeId'
      responses:
        200:
          $ref: '#/components/responses/AttributeResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/attributesManager/getAttribute/name-group:
    get:
      tags:
        - AttributesManager
      operationId: getGroupAttributeByName
      summary: Returns a group Attribute by its name.
      description: This is an overloaded method getAttribute, specialized for group and attribute name.
      parameters:
        - $ref: '#/components/parameters/groupId'
        - $ref: '#/components/parameters/attributeName'
      responses:
        200:
          $ref: '#/components/responses/AttributeResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/attributesManager/getAttribute/id-group:
    get:
      tags:
        - AttributesManager
      operationId: getGroupAttributeById
      summary: Returns a group Attribute by its id.
      description: This is an overloaded method getAttribute, specialized for group and attribute id.
      parameters:
        - $ref: '#/components/parameters/groupId'
        - $ref: '#/components/parameters/attributeId'
      responses:
        200:
          $ref: '#/components/responses/AttributeResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/attributesManager/getAttribute/name-resource:
    get:
      tags:
        - AttributesManager
      operationId: getResourceAttributeByName
      summary: Returns a resource Attribute by its name.
      description: This is an overloaded method getAttribute, specialized for resource and attribute name.
      parameters:
        - $ref: '#/components/parameters/resourceId'
        - $ref: '#/components/parameters/attributeName'
      responses:
        200:
          $ref: '#/components/responses/AttributeResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/attributesManager/getAttribute/id-resource:
    get:
      tags:
        - AttributesManager
      operationId: getResourceAttributeById
      summary: Returns a resource Attribute by its id.
      description: This is an overloaded method getAttribute, specialized for resource and attribute id.
      parameters:
        - $ref: '#/components/parameters/resourceId'
        - $ref: '#/components/parameters/attributeId'
      responses:
        200:
          $ref: '#/components/responses/AttributeResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/attributesManager/getAttribute/name-member-group:
    get:
      tags:
        - AttributesManager
      operationId: getMemberGroupAttributeByName
      summary: Returns a member_group Attribute by its name.
      description: This is an overloaded method getAttribute, specialized for member, group and attribute name.
      parameters:
        - $ref: '#/components/parameters/memberId'
        - $ref: '#/components/parameters/groupId'
        - $ref: '#/components/parameters/attributeName'
      responses:
        200:
          $ref: '#/components/responses/AttributeResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/attributesManager/getAttribute/id-member-group:
    get:
      tags:
        - AttributesManager
      operationId: getMemberGroupAttributeById
      summary: Returns a member_group Attribute by its id.
      description: This is an overloaded method getAttribute, specialized for member, group and attribute id.
      parameters:
        - $ref: '#/components/parameters/memberId'
        - $ref: '#/components/parameters/groupId'
        - $ref: '#/components/parameters/attributeId'
      responses:
        200:
          $ref: '#/components/responses/AttributeResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/attributesManager/getAttribute/name-member-resource:
    get:
      tags:
        - AttributesManager
      operationId: getMemberResourceAttributeByName
      summary: Returns a member_resource Attribute by its name.
      description: This is an overloaded method getAttribute, specialized for member, resource and attribute name.
      parameters:
        - $ref: '#/components/parameters/memberId'
        - $ref: '#/components/parameters/resourceId'
        - $ref: '#/components/parameters/attributeName'
      responses:
        200:
          $ref: '#/components/responses/AttributeResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/attributesManager/getAttribute/id-member-resource:
    get:
      tags:
        - AttributesManager
      operationId: getMemberResourceAttributeById
      summary: Returns a member_resource Attribute by its id.
      description: This is an overloaded method getAttribute, specialized for member, resource and attribute id.
      parameters:
        - $ref: '#/components/parameters/memberId'
        - $ref: '#/components/parameters/resourceId'
        - $ref: '#/components/parameters/attributeId'
      responses:
        200:
          $ref: '#/components/responses/AttributeResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/attributesManager/getAttribute/name-group-resource:
    get:
      tags:
        - AttributesManager
      operationId: getGroupResourceAttributeByName
      summary: Returns a group_resource Attribute by its name.
      description: This is an overloaded method getAttribute, specialized for group, resource and attribute name.
      parameters:
        - $ref: '#/components/parameters/groupId'
        - $ref: '#/components/parameters/resourceId'
        - $ref: '#/components/parameters/attributeName'
      responses:
        200:
          $ref: '#/components/responses/AttributeResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/attributesManager/getAttribute/id-group-resource:
    get:
      tags:
        - AttributesManager
      operationId: getGroupResourceAttributeById
      summary: Returns a group_resource Attribute by its id.
      description: This is an overloaded method getAttribute, specialized for group, resource and attribute id.
      parameters:
        - $ref: '#/components/parameters/groupId'
        - $ref: '#/components/parameters/resourceId'
        - $ref: '#/components/parameters/attributeId'
      responses:
        200:
          $ref: '#/components/responses/AttributeResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/attributesManager/getAttribute/name-ues:
    get:
      tags:
        - AttributesManager
      operationId: getUserExtSourceAttributeByName
      summary: Returns a UserExtSource Attribute by its name.
      description: This is an overloaded method getAttribute, specialized for UserExtSource and attribute name.
      parameters:
        - $ref: '#/components/parameters/userExtSourceId'
        - $ref: '#/components/parameters/attributeName'
      responses:
        200:
          $ref: '#/components/responses/AttributeResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/attributesManager/getAttribute/id-ues:
    get:
      tags:
        - AttributesManager
      operationId: getUserExtSourceAttributeById
      summary: Returns a UserExtSource Attribute by its id.
      description: This is an overloaded method getAttribute, specialized for UserExtSource and attribute id.
      parameters:
        - $ref: '#/components/parameters/userExtSourceId'
        - $ref: '#/components/parameters/attributeId'
      responses:
        200:
          $ref: '#/components/responses/AttributeResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/attributesManager/getAttribute/name-host:
    get:
      tags:
        - AttributesManager
      operationId: getHostAttributeByName
      summary: Returns a host Attribute by its name.
      description: This is an overloaded method getAttribute, specialized for host and attribute name.
      parameters:
        - $ref: '#/components/parameters/hostId'
        - $ref: '#/components/parameters/attributeName'
      responses:
        200:
          $ref: '#/components/responses/AttributeResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/attributesManager/getAttribute/id-host:
    get:
      tags:
        - AttributesManager
      operationId: getHostAttributeById
      summary: Returns a host Attribute by its id.
      description: This is an overloaded method getAttribute, specialized for host and attribute id.
      parameters:
        - $ref: '#/components/parameters/hostId'
        - $ref: '#/components/parameters/attributeId'
      responses:
        200:
          $ref: '#/components/responses/AttributeResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/attributesManager/getAttribute/name-entityless:
    get:
      tags:
        - AttributesManager
      operationId: getEntitylessAttributeByName
      summary: Returns an entityless Attribute by its name.
      description: This is an overloaded method getAttribute, specialized for entityless key and attribute name.
      parameters:
        - { name: key, description: "key for entityless attribute", schema: { type: string },  in: query, required: true }
        - $ref: '#/components/parameters/attributeName'
      responses:
        200:
          $ref: '#/components/responses/AttributeResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/attributesManager/getAttribute/any:
    get:
      tags:
        - AttributesManager
      operationId: getAttribute
      summary: Returns an Attribute by its name or id.
      description: |
        This method cannot be fully described correctly in OpenID, because it cannot describe allowed combinations of parameters.
        One of attributeName, attributeId is required.
        The other parameters specify ids that can be combined in the following ways:
         (facility), (user), (user,facility), (vo), (member), (group), (resource),
         (member,group), (member,resource), (group,resource),(userExtSource), (host), (key)
        Use the specialized methods getFacilityAttributeByName(), getMemberResourceAttributeById() etc.
      externalDocs:
        url:  https://perun-aai.org/documentation/technical-documentation/rpc-api/rpc-javadoc-AttributesManager.html
      parameters:
        - { name: attributeName, description: "full name of attribute (namespace + ':' + friendlyName)", schema: { type: string },  in: query }
        - { name: attributeId, description: "id of attribute", schema: { type: integer },  in: query }
        - { name: facility, description: "id of Facility", schema: { type: integer },  in: query }
        - { name: user, description: "id of User", schema: { type: integer },  in: query }
        - { name: vo, description: "id of Vo", schema: { type: integer },  in: query }
        - { name: resource, description: "id of Resource", schema: { type: integer },  in: query }
        - { name: member, description: "id of Member", schema: { type: integer },  in: query }
        - { name: group, description: "id of Group", schema: { type: integer },  in: query }
        - { name: host, description: "id of Host", schema: { type: integer },  in: query }
        - { name: userExtSource, description: "id of UserExtSource", schema: { type: integer },  in: query }
        - { name: key, description: "key for entityless attribute", schema: { type: string },  in: query }
      responses:
        200:
          $ref: '#/components/responses/AttributeResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/attributesManager/getAttributeDefinition:
    get:
      tags:
        - AttributesManager
      operationId: getAttributeDefinitionByName
      summary: Returns an AttributeDefinition by its name.
      parameters:
        - $ref: '#/components/parameters/attributeName'
      responses:
        200:
          $ref: '#/components/responses/AttributeDefinitionResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/attributesManager/getAttributesDefinition:
    get:
      tags:
        - AttributesManager
      operationId: getAllAttributeDefinitions
      summary: Returns all AttributeDefinitions.
      parameters: []
      responses:
        200:
          $ref: '#/components/responses/ListOfAttributeDefinitionsResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/attributesManager/getAttributeDefinitionById:
    get:
      tags:
        - AttributesManager
      operationId: getAttributeDefinitionById
      summary: Returns an AttributeDefinition by its id.
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        200:
          $ref: '#/components/responses/AttributeDefinitionResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/attributesManager/getAttributesDefinitionByNamespace:
    get:
      tags:
        - AttributesManager
      operationId: getAttributeDefinitionsByNamespace
      summary: Returns all AttributeDefinitions in a namespace.
      parameters: []
      responses:
        200:
          $ref: '#/components/responses/ListOfAttributeDefinitionsResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

#TODO getAttributesDefinitionWithRights

##
# combinations:
#  (facility), (user), (user,facility), (vo), (member), (group), (resource),
#  (member,group), (member,resource), (group,resource),(userExtSource), (host), (key)

  /json/attributesManager/setAttribute/facility:
    post:
      tags:
        - AttributesManager
      operationId: setFacilityAttribute
      summary: Sets Attribute for Facility.
      responses:
        200:
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              title: InputSetFacilityAttribute
              description: "input to setFacilityAttribute"
              type: object
              required:
                - facility
                - attribute
              properties:
                facility: { type: integer, description: "facility id" }
                attribute: { $ref: '#/components/schemas/Attribute' }

  /json/attributesManager/setAttribute/user:
    post:
      tags:
        - AttributesManager
      operationId: setUserAttribute
      summary: Sets Attribute for User.
      responses:
        200:
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              title: InputSetUserAttribute
              description: "input to setUserAttribute"
              type: object
              required:
                - user
                - attribute
              properties:
                user: { type: integer, description: "user id" }
                attribute: { $ref: '#/components/schemas/Attribute' }

  /json/attributesManager/setAttribute/facility-user:
    post:
      tags:
        - AttributesManager
      operationId: setUserFacilityAttribute
      summary: Sets Attribute for User and Facility.
      responses:
        200:
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              title: InputSetUserFacilityAttribute
              description: "input to setUserFacilityAttribute"
              type: object
              required:
                - user
                - facility
                - attribute
              properties:
                user: { type: integer, description: "user id" }
                facility: { type: integer, description: "facility id" }
                attribute: { $ref: '#/components/schemas/Attribute' }

  /json/attributesManager/setAttribute/vo:
    post:
      tags:
        - AttributesManager
      operationId: setVoAttribute
      summary: Sets Attribute for Vo.
      responses:
        200:
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              title: InputSetVoAttribute
              description: "input to setVoAttribute"
              type: object
              required:
                - vo
                - attribute
              properties:
                vo: { type: integer, description: "vo id" }
                attribute: { $ref: '#/components/schemas/Attribute' }

  /json/attributesManager/setAttribute/member:
    post:
      tags:
        - AttributesManager
      operationId: setMemberAttribute
      summary: Sets Attribute for Member.
      responses:
        200:
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              title: InputSetMemberAttribute
              description: "input to setMemberAttribute"
              type: object
              required:
                - member
                - attribute
              properties:
                member: { type: integer, description: "member id" }
                attribute: { $ref: '#/components/schemas/Attribute' }

  /json/attributesManager/setAttribute/group:
    post:
      tags:
        - AttributesManager
      operationId: setGroupAttribute
      summary: Sets Attribute for Group.
      responses:
        200:
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              title: InputSetGroupAttribute
              description: "input to setGroupAttribute"
              type: object
              required:
                - group
                - attribute
              properties:
                group: { type: integer, description: "group id" }
                attribute: { $ref: '#/components/schemas/Attribute' }

  /json/attributesManager/setAttribute/resource:
    post:
      tags:
        - AttributesManager
      operationId: setResourceAttribute
      summary: Sets Attribute for Resource.
      responses:
        200:
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              title: InputSetResourceAttribute
              description: "input to setResourceAttribute"
              type: object
              required:
                - resource
                - attribute
              properties:
                resource: { type: integer, description: "resource id" }
                attribute: { $ref: '#/components/schemas/Attribute' }

  /json/attributesManager/setAttribute/member-group:
    post:
      tags:
        - AttributesManager
      operationId: setMemberGroupAttribute
      summary: Sets Attribute for Member and Group.
      responses:
        200:
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              title: InputSetMemberGroupAttribute
              description: "input to setMemberGroupAttribute"
              type: object
              required:
                - member
                - group
                - attribute
              properties:
                member: { type: integer, description: "member id" }
                group: { type: integer, description: "group id" }
                attribute: { $ref: '#/components/schemas/Attribute' }

  /json/attributesManager/setAttribute/member-resource:
    post:
      tags:
        - AttributesManager
      operationId: setMemberResourceAttribute
      summary: Sets Attribute for Member and Resource.
      responses:
        200:
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              title: InputSetMemberResourceAttribute
              description: "input to setMemberResourceAttribute"
              type: object
              required:
                - member
                - resource
                - attribute
              properties:
                member: { type: integer, description: "member id" }
                resource: { type: integer, description: "resource id" }
                attribute: { $ref: '#/components/schemas/Attribute' }

  /json/attributesManager/setAttribute/group-resource:
    post:
      tags:
        - AttributesManager
      operationId: setGroupResourceAttribute
      summary: Sets Attribute for Group and Resource.
      responses:
        200:
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              title: InputSetGroupResourceAttribute
              description: "input to setGroupResourceAttribute"
              type: object
              required:
                - group
                - resource
                - attribute
              properties:
                group: { type: integer, description: "group id" }
                resource: { type: integer, description: "resource id" }
                attribute: { $ref: '#/components/schemas/Attribute' }

  /json/attributesManager/setAttribute/userExtSource:
    post:
      tags:
        - AttributesManager
      operationId: setUserExtSourceAttribute
      summary: Sets Attribute for UserExtSource.
      responses:
        200:
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              title: InputSetUserExtSourceAttribute
              description: "input to setUserExtSourceAttribute"
              type: object
              required:
                - userExtSource
                - attribute
              properties:
                userExtSource: { type: integer, description: "userExtSource id" }
                attribute: { $ref: '#/components/schemas/Attribute' }

  /json/attributesManager/setAttribute/host:
    post:
      tags:
        - AttributesManager
      operationId: setHostAttribute
      summary: Sets Attribute for Host.
      responses:
        200:
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              title: InputSetHostAttribute
              description: "input to setHostAttribute"
              type: object
              required:
                - host
                - attribute
              properties:
                host: { type: integer, description: "host id" }
                attribute: { $ref: '#/components/schemas/Attribute' }

  /json/attributesManager/setAttribute/entityless:
    post:
      tags:
        - AttributesManager
      operationId: setEntitylessAttribute
      summary: Sets entityless Attribute.
      responses:
        200:
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              title: InputEntitylessAttribute
              description: "input to setEntitylessAttribute"
              type: object
              required:
                - key
                - attribute
              properties:
                key: { type: string, description: "key for entityless attribute" }
                attribute: { $ref: '#/components/schemas/Attribute' }

  /json/attributesManager/createAttribute:
    post:
      tags:
        - AttributesManager
      operationId: createAttributeDefinition
      summary: Creates AttributeDefinition.
      responses:
        200:
          $ref: '#/components/responses/AttributeDefinitionResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              title: InputCreateAttributeDefinition
              description: "input to createAttributeDefinition"
              type: object
              required:
                - attribute
              properties:
                attribute: { $ref: '#/components/schemas/AttributeDefinition' }

  /urlinjsonout/attributesManager/deleteAttribute:
    post:
      tags:
        - AttributesManager
      operationId: deleteAttributeDefinition
      summary: Deletes attribute definition from Perun including all values set for any entity.
      parameters:
        - $ref: '#/components/parameters/attributeInteger'
      responses:
        200:
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /urlinjsonout/attributesManager/deleteAttributes:
    post:
      tags:
        - AttributesManager
      operationId: deleteAttributeDefinitions
      summary: Deletes attribute definitions from Perun including all values set for any entity.
      parameters:
        - $ref: '#/components/parameters/attributes'
      responses:
        200:
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

#TODO getRequiredAttributes

#TODO getRequiredAttributesDefinition

#TODO getResourceRequiredAttributes

#TODO fillAttribute

#TODO fillAttributes

#TODO checkAttributeValue

#TODO checkAttributeSyntax

#TODO checkAttributeSemantics

#TODO checkAttributesValue

#TODO checkAttributesSemantics

#TODO checkAttributesSyntax

#TODO removeAttributes

#TODO removeAttribute

#TODO removeAllAttributes

#TODO getLogins

#TODO updateAttributeDefinition

#TODO doTheMagic

#TODO getAttributeRights

#TODO setAttributeRights

#TODO convertAttributeToUnique

#TODO getAttributeModulesDependenciesGraphText

  #################################################
  #                                               #
  # DatabaseManager                               #
  #                                               #
  #################################################

  /json/databaseManager/getCurrentDatabaseVersion:
    get:
      tags:
        - DatabaseManager
      operationId: getCurrentDatabaseVersion
      summary: Returns current database version, e.g. "3.1.55"
      responses:
        200:
          $ref: '#/components/responses/StringResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/databaseManager/getDatabaseDriverInformation:
    get:
      tags:
        - DatabaseManager
      operationId: getDatabaseDriverInformation
      summary: Returns current database driver info, e.g. "PostgreSQL JDBC Driver-42.2.8"
      responses:
        200:
          $ref: '#/components/responses/StringResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/databaseManager/getDatabaseInformation:
    get:
      tags:
        - DatabaseManager
      operationId: getDatabaseInformation
      summary: Returns current database info, e.g. "PostgreSQL-12.0 (Debian 12.0-2.pgdg100+1)"
      responses:
        200:
          $ref: '#/components/responses/StringResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  #################################################
  #                                               #
  # ExtSourcesManager                             #
  #                                               #
  #################################################

  /json/extSourcesManager/getExtSources:
    get:
      tags:
        - ExtSourcesManager
      operationId: getExtSources
      summary: Returns the list of all external sources.
      responses:
        200:
          $ref: '#/components/responses/ListOfExtSourcesResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/extSourcesManager/getExtSourceById:
    get:
      tags:
        - ExtSourcesManager
      operationId: getExtSourceById
      summary: Returns an external source by its id.
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        200:
          $ref: '#/components/responses/ExtSourceResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  #################################################
  #                                               #
  # UsersManager                                  #
  #                                               #
  #################################################

  /json/usersManager/getUserById:
    get:
      tags:
        - UsersManager
      operationId: getUserById
      summary: Returns user by its id
      description: Returns object representing the User
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        200:
          $ref: '#/components/responses/UserResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/usersManager/getUserByExtSourceNameAndExtLogin:
    get:
      tags:
        - UsersManager
      operationId: getUserByExtSourceNameAndExtLogin
      summary: Returns user by its ExtSourceName and ExtLogin.
      description: Returns User found by its authentication data
      parameters:
        - name: extLogin
          description: external login of user, e.g. john
          schema:
            type: string
          in: query
          required: true
        - name: extSourceName
          description: external source name, e.g. IdP entityId
          schema:
            type: string
          in: query
          required: true
      responses:
        200:
          $ref: '#/components/responses/UserResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/usersManager/getRichUserWithAttributes:
    get:
      tags:
        - UsersManager
      operationId: getRichUserWithAttributes
      summary: Returns user with attributes
      description: Returns object representing the User with attributes
      parameters:
        - $ref: '#/components/parameters/userId'
      responses:
        200:
          $ref: '#/components/responses/RichUserResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/usersManager/getUserExtSources:
    get:
      tags:
        - UsersManager
      operationId: getUserExtSources
      summary: Gets list of all user's external sources.
      parameters:
        - $ref: '#/components/parameters/userId'
      responses:
        200:
          $ref: '#/components/responses/ListOfUserExtSourcesResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/usersManager/getGroupsWhereUserIsActive/facility:
    get:
      tags:
        - UsersManager
      operationId: getGroupsForFacilityWhereUserIsActive
      summary: Get list of groups of user on specified facility where use is active.
      description: |
        That means User is a VALID in the VO and the Group and groups are assigned to the facility.
      parameters:
        - $ref: '#/components/parameters/userId'
        - $ref: '#/components/parameters/facilityId'
      responses:
        200:
          $ref: '#/components/responses/ListOfGroupsResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/usersManager/getGroupsWhereUserIsActive/resource:
    get:
      tags:
        - UsersManager
      operationId: getGroupsForResourceWhereUserIsActive
      summary: Get list of groups of user on specified resource where use is active.
      description: |
        That means User is a VALID in the VO and the Group and groups are assigned to the resource.
      parameters:
        - $ref: '#/components/parameters/userId'
        - $ref: '#/components/parameters/resourceId'
      responses:
        200:
          $ref: '#/components/responses/ListOfGroupsResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  #################################################
  #                                               #
  # MembersManager                                #
  #                                               #
  #################################################

  /json/membersManager/getMemberById:
    get:
      tags:
        - MembersManager
      operationId: getMemberById
      summary: Returns Member by its id.
      description: Gets Member
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        200:
          $ref: '#/components/responses/MemberResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/membersManager/getRichMember:
    get:
      tags:
        - MembersManager
      operationId: getRichMember
      summary: Returns RichMember by member id.
      description: Get RichMember without attributes
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        200:
          $ref: '#/components/responses/RichMemberResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/membersManager/getRichMemberWithAttributes:
    get:
      tags:
        - MembersManager
      operationId: getRichMemberWithAttributes
      summary: Returns Member by its id.
      description: Get richMember with member/user attributes
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        200:
          $ref: '#/components/responses/RichMemberResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/membersManager/getMemberByUser:
    get:
      tags:
        - MembersManager
      operationId: getMemberByUser
      summary: Returns a Member specified by VO id and User id.
      parameters:
        - $ref: '#/components/parameters/voId'
        - $ref: '#/components/parameters/userId'
      responses:
        200:
          $ref: '#/components/responses/MemberResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/membersManager/getMembersByUser:
    get:
      tags:
        - MembersManager
      operationId: getMembersByUser
      summary: Returns members for a user.
      parameters:
        - $ref: '#/components/parameters/userId'
      responses:
        200:
          $ref: '#/components/responses/ListOfMembersResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/membersManager/findMembersInVo:
    get:
      tags:
        - MembersManager
      operationId: findMembersInVo
      summary: Searches for members in a VO.
      parameters:
        - $ref: '#/components/parameters/voId'
        - { name: searchString, schema: { type: string }, required: true, in: query, description: 'string to search by'}
      responses:
        200:
          $ref: '#/components/responses/ListOfMembersResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  #################################################
  #                                               #
  # FacilitiesManager                             #
  #  (complete with TODOs)                        #
  #################################################

  /json/facilitiesManager/getFacilityById:
    get:
      tags:
        - FacilitiesManager
      operationId: getFacilityById
      summary: Returns Facility with specified id.
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        200:
          $ref: '#/components/responses/FacilityResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/facilitiesManager/getFacilityByName:
    get:
      tags:
        - FacilitiesManager
      operationId: getFacilityByName
      summary: Returns Facility with specified name.
      parameters:
        - { name: name, description: "name of Facility", schema: { type: string }, in: query, required: true}
      responses:
        200:
          $ref: '#/components/responses/FacilityResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/facilitiesManager/getAssignedUsers:
    get:
      tags:
        - FacilitiesManager
      operationId: getAssignedUsers
      summary: Lists all users assigned to facility containing resources where service is assigned.
      parameters:
        - $ref: '#/components/parameters/facilityId'
        - name: service
          description: "id of Service"
          schema:
            type: integer
          in: query
          required: false
      responses:
        200:
          $ref: '#/components/responses/ListOfUsersResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/facilitiesManager/getRichFacilities:
    get:
      tags:
        - FacilitiesManager
      operationId: getRichFacilities
      summary: Gets all possible rich facilities with all their owners.
      parameters: []
      responses:
        200:
          $ref: '#/components/responses/ListOfRichFacilitiesResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/facilitiesManager/getFacilitiesByDestination:
    get:
      tags:
        - FacilitiesManager
      operationId: getFacilitiesByDestination
      summary: Searches for the Facilities by theirs destination.
      parameters:
        - $ref: '#/components/parameters/destinationName'
      responses:
        200:
          $ref: '#/components/responses/ListOfFacilitiesResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'


  /json/facilitiesManager/getFacilitiesByAttribute:
    get:
      tags:
        - FacilitiesManager
      operationId: getFacilitiesByAttribute
      summary: Returns all facilities that have the attribute 'attributeName' with the string value 'attributeValue'.
      description: Searching only def and opt attributes. Large attributes are not supported.
      parameters:
        - $ref: '#/components/parameters/attributeName'
        - $ref: '#/components/parameters/attributeValue'
      responses:
        200:
          $ref: '#/components/responses/ListOfFacilitiesResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/facilitiesManager/getFacilities:
    get:
      tags:
        - FacilitiesManager
      operationId: getAllFacilities
      summary: Get all facilities.
      parameters: []
      responses:
        200:
          $ref: '#/components/responses/ListOfFacilitiesResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/facilitiesManager/getFacilitiesCount:
    get:
      tags:
        - FacilitiesManager
      operationId: getFacilitiesCount
      summary: Gets count of all facilities.
      parameters: []
      responses:
        200:
          $ref: '#/components/responses/IntegerResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/facilitiesManager/getOwners:
    get:
      tags:
        - FacilitiesManager
      operationId: getFacilityOwners
      summary: Returns owners of a facility.
      parameters:
        - $ref: '#/components/parameters/facilityId'
      responses:
        200:
          $ref: '#/components/responses/ListOfOwnersResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /urlinjsonout/facilitiesManager/addOwner:
    post:
      tags:
        - FacilitiesManager
      operationId: addFacilityOwner
      summary: Adds owner of a facility.
      parameters:
        - $ref: '#/components/parameters/facilityId'
        - $ref: '#/components/parameters/ownerId'
      responses:
        200:
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /urlinjsonout/facilitiesManager/removeOwner:
    post:
      tags:
        - FacilitiesManager
      operationId: removeFacilityOwner
      summary: Removes owner from a facility.
      parameters:
        - $ref: '#/components/parameters/facilityId'
        - $ref: '#/components/parameters/ownerId'
      responses:
        200:
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /urlinjsonout/facilitiesManager/getAllowedVos:
    post:
      tags:
        - FacilitiesManager
      operationId: getAllowedVos
      summary: Return all VO which can use a facility. (VO must have the resource which belongs to this facility.)
      parameters:
        - $ref: '#/components/parameters/facilityId'
      responses:
        200:
          $ref: '#/components/responses/ListOfVosResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/facilitiesManager/getAllowedGroups:
    get:
      tags:
        - FacilitiesManager
      operationId: getAllowedGroups
      summary: Get all assigned groups on Facility, optionally filtered by Vo or Service or both.
      parameters:
        - $ref: '#/components/parameters/facilityId'
        - { name: vo, description: "id of Vo", schema: { type: integer },  in: query, required: false }
        - { name: service, description: "id of Service", schema: { type: integer },  in: query, required: false }
      responses:
        200:
          $ref: '#/components/responses/ListOfGroupsResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/facilitiesManager/getAllowedRichGroupsWithAttributes:
    get:
      tags:
        - FacilitiesManager
      operationId: getAllowedRichGroupsWithAttributes
      summary: Get all assigned RichGroups on Facility with specified set of attributes, optionally filtered by Vo or Service or both.
      parameters:
        - $ref: '#/components/parameters/facilityId'
        - $ref: '#/components/parameters/attrNames'
        - { name: vo, description: "id of Vo", schema: { type: integer },  in: query, required: false }
        - { name: service, description: "id of Service", schema: { type: integer },  in: query, required: false }
      responses:
        200:
          $ref: '#/components/responses/ListOfRichGroupsResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/facilitiesManager/getAssignedResources:
    get:
      tags:
        - FacilitiesManager
      operationId: getAssignedResourcesForFacility
      summary: Returns all resources assigned to a facility.
      parameters:
        - $ref: '#/components/parameters/facilityId'
      responses:
        200:
          $ref: '#/components/responses/ListOfResourcesResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/facilitiesManager/getAssignedRichResources:
    get:
      tags:
        - FacilitiesManager
      operationId: getAssignedRichResourcesForFacility
      summary: Returns all rich resources assigned to a facility with VO property filled.
      parameters:
        - $ref: '#/components/parameters/facilityId'
      responses:
        200:
          $ref: '#/components/responses/ListOfRichResourcesResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /urlinjsonout/facilitiesManager/createFacility:
    post:
      tags:
        - FacilitiesManager
      operationId: createFacility
      summary: Creates a facility. Caller is automatically set as facility manager.
      parameters:
        - { name: name, required: true, in: query, schema: { type: string, pattern: '[a-zA-Z0-9.-_ ]+' }, description: "name of a facility - can contain only a-Z0-9.-_ and space characters" }
        - { name: description, required: false, in: query, schema: { type: string }, description: "optional description of a facility" }
      responses:
        200:
          $ref: '#/components/responses/FacilityResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /urlinjsonout/facilitiesManager/deleteFacility:
    post:
      tags:
        - FacilitiesManager
      operationId: deleteFacility
      summary: Deletes a facility.
      parameters:
        - $ref: '#/components/parameters/facilityId'
      responses:
        200:
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/facilitiesManager/updateFacility:
    post:
      tags:
        - FacilitiesManager
      operationId: updateFacility
      summary: Updates a facility.
      responses:
        200:
          $ref: '#/components/responses/FacilityResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              title: InputUpdateFacility
              description: "input to updateFacility"
              type: object
              required:
                - facility
              properties:
                facility: { $ref: '#/components/schemas/Facility' }

  /json/facilitiesManager/getOwnerFacilities:
    get:
      tags:
        - FacilitiesManager
      operationId: getOwnerFacilities
      summary: Returns list of all facilities owned by the owner.
      parameters:
        - $ref: '#/components/parameters/ownerId'
      responses:
        200:
          $ref: '#/components/responses/ListOfFacilitiesResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/facilitiesManager/getHosts:
    get:
      tags:
        - FacilitiesManager
      operationId: getHosts
      summary: Returns Hosts of a Facility.
      parameters:
        - $ref: '#/components/parameters/facilityId'
      responses:
        200:
          $ref: '#/components/responses/ListOfHostsResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/facilitiesManager/getHostById:
    get:
      tags:
        - FacilitiesManager
      operationId: getHostById
      summary: Returns a host by its id.
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        200:
          $ref: '#/components/responses/HostResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/facilitiesManager/getHostsByHostname:
    get:
      tags:
        - FacilitiesManager
      operationId: getHostsByHostname
      summary: Returns hosts by hostname. (from all facilities)
      parameters:
        - { name: hostname, required: true, in: query, schema: { type: string }, description: "name of a host" }
      responses:
        200:
          $ref: '#/components/responses/HostResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/facilitiesManager/getFacilityForHost:
    get:
      tags:
        - FacilitiesManager
      operationId: getFacilityForHost
      summary: Return facility which has the host.
      parameters:
        - $ref: '#/components/parameters/hostId'
      responses:
        200:
          $ref: '#/components/responses/FacilityResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/facilitiesManager/getHostsCount:
    get:
      tags:
        - FacilitiesManager
      operationId: getHostsCount
      summary: Count hosts of Facility.
      parameters:
        - $ref: '#/components/parameters/facilityId'
      responses:
        200:
          $ref: '#/components/responses/IntegerResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /urlinjsonout/facilitiesManager/addHosts:
    post:
      tags:
        - FacilitiesManager
      operationId: addHosts
      summary: Adds hosts to the Facility.
      parameters:
        - $ref: '#/components/parameters/facilityId'
        - $ref: '#/components/parameters/hostnames'
      responses:
        200:
          $ref: '#/components/responses/ListOfHostsResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /urlinjsonout/facilitiesManager/removeHosts:
    post:
      tags:
        - FacilitiesManager
      operationId: removeHosts
      summary: Remove hosts from a Facility.
      parameters:
        - $ref: '#/components/parameters/facilityId'
        - $ref: '#/components/parameters/listOfHostIds'
      responses:
        200:
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /urlinjsonout/facilitiesManager/addHost:
    post:
      tags:
        - FacilitiesManager
      operationId: addHost
      summary: Adds a host to the Facility.
      parameters:
        - $ref: '#/components/parameters/facilityId'
        - { name: hostname, description: "DNS name of host", schema: { type: string },  in: query, required: true }
      responses:
        200:
          $ref: '#/components/responses/ListOfHostsResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /urlinjsonout/facilitiesManager/removeHost:
    post:
      tags:
        - FacilitiesManager
      operationId: removeHost
      summary: Removes a host.
      parameters:
        - $ref: '#/components/parameters/hostId'
      responses:
        200:
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  #TODO getAssignedFacilities

  /urlinjsonout/facilitiesManager/addAdmin/user:
    post:
      tags:
        - FacilitiesManager
      operationId: addFacilityAdminUser
      summary: Adds a user as a Facility admin.
      parameters:
        - $ref: '#/components/parameters/facilityId'
        - $ref: '#/components/parameters/userId'
      responses:
        200:
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /urlinjsonout/facilitiesManager/addAdmin/group:
    post:
      tags:
        - FacilitiesManager
      operationId: addFacilityAdminGroup
      summary: Adds a group as a Facility admin.
      parameters:
        - $ref: '#/components/parameters/facilityId'
        - { name: authorizedGroup, schema: { type: integer}, in: query, required: true, description: 'Group id' }
      responses:
        200:
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'


  /urlinjsonout/facilitiesManager/removeAdmin/user:
    post:
      tags:
        - FacilitiesManager
      operationId: removeFacilityAdminUser
      summary: Removes a user as a Facility admin.
      parameters:
        - $ref: '#/components/parameters/facilityId'
        - $ref: '#/components/parameters/userId'
      responses:
        200:
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /urlinjsonout/facilitiesManager/removeAdmin/group:
    post:
      tags:
        - FacilitiesManager
      operationId: removeFacilityAdminGroup
      summary: Removes a group as a Facility admin.
      parameters:
        - $ref: '#/components/parameters/facilityId'
        - { name: authorizedGroup, schema: { type: integer}, in: query, required: true, description: 'Group id' }
      responses:
        200:
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'


  /json/facilitiesManager/getAdmins:
    get:
      tags:
        - FacilitiesManager
      operationId: getFacilityAdminUsers
      description: |
          Get list of all facility administrators for supported role and given facility.
          If onlyDirectAdmins is true, return only direct admins of the group for supported role.
          Supported roles: FacilityAdmin
      parameters:
        - $ref: '#/components/parameters/facilityId'
        - { name: onlyDirectAdmins, schema: { type: boolean }, in: query, required: true, description: "if true, get only direct facility administrators (if false, get both direct and indirect)"}
      responses:
        200:
          $ref: '#/components/responses/ListOfUsersResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/facilitiesManager/getAdminGroups:
    get:
      tags:
        - FacilitiesManager
      operationId: getFacilityAdminGroups
      summary: Get all Facility group admins.
      parameters:
        - $ref: '#/components/parameters/facilityId'
      responses:
        200:
          $ref: '#/components/responses/ListOfGroupsResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'


  #TODO getRichAdmins

  #TODO getRichAdminsWithAttributes

  #TODO getRichAdminsWithSpecificAttributes

  #TODO getDirectRichAdminsWithSpecificAttributes

  #TODO getFacilitiesWhereUserIsAdmin

  #TODO getFacilitiesByHostName

  #TODO getAllowedUsers

  #TODO copyOwners

  #TODO copyManagers

  #TODO copyAttributes

  #TODO getFacilityContactGroups

  #TODO getFacilityContactGroup

  #TODO getAllContactGroupNames

  #TODO addFacilityContacts

  #TODO addFacilityContact

  #TODO removeFacilityContacts

  #TODO removeFacilityContact

  #TODO getAssignedSecurityTeams

  #TODO assignSecurityTeam

  #TODO removeSecurityTeam

  #TODO setBan

  #TODO getBanById

  #TODO getBan

  #TODO getBansForUser

  #TODO getBansForFacility

  #TODO updateBan

  #TODO removeBan

  #################################################
  #                                               #
  # OwnersManager                                 #
  #  (completely described)                       #
  #################################################

  /json/ownersManager/createOwner:
    post:
      tags:
        - OwnersManager
      operationId: createOwner
      summary: Creates a new owner.
      responses:
        200:
          $ref: '#/components/responses/OwnerResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              title: InputCreateOwner
              description: "input to createOwner, no id, numeric ownerType instead of string type"
              type: object
              required:
                - name
                - contact
                - ownerType
              properties:
                name: { type: string, description: "name of contact, e.g. John Doe or NSA"}
                contact: { type: string, description: "email address"}
                ownerType:
                  type: integer
                  enum: [0, 1]
                  description: "0 - technical, 1 - administrative"

  /urlinjsonout/ownersManager/deleteOwner:
    post:
      tags:
        - OwnersManager
      operationId: deleteOwner
      summary: Deletes Owner specified by id. Returns null.
      responses:
        200:
          $ref: '#/components/responses/OwnerResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'
      parameters:
        - $ref: '#/components/parameters/ownerId'

  /json/ownersManager/getOwnerById:
    get:
      tags:
        - OwnersManager
      operationId: getOwnerById
      summary: Returns Owner by its id.
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        200:
          $ref: '#/components/responses/OwnerResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/ownersManager/getOwners:
    get:
      tags:
        - OwnersManager
      operationId: getAllOwners
      summary: Returns all owners.
      parameters: []
      responses:
        200:
          $ref: '#/components/responses/ListOfOwnersResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'


  #################################################
  #                                               #
  # GroupsManager                                 #
  #                                               #
  #################################################

  /json/groupsManager/getGroupById:
    get:
      tags:
        - GroupsManager
      operationId: getGroupById
      summary: Returns a group by id.
      description: Throws GroupNotExistsException when the group doesn't exist.
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        200:
          $ref: '#/components/responses/GroupResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/groupsManager/getGroupByName:
    get:
      tags:
        - GroupsManager
      operationId: getGroupByName
      description: |
        Returns a group by VO and Group name.
        IMPORTANT: need to use full name of group (ex. 'toplevel:a:b', not the shortname which is in this example 'b')
        Throws GroupNotExistsException when the group doesn't exist.
      parameters:
        - $ref: '#/components/parameters/voId'
        - { name: name, schema: { type: string }, in: query, required: true, description: 'full group name' }
      responses:
        200:
          $ref: '#/components/responses/GroupResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/groupsManager/isGroupMember:
    get:
      tags:
        - GroupsManager
      operationId: isGroupMember
      summary: Return true if Member is member of the Group.
      parameters:
        - $ref: '#/components/parameters/memberId'
        - $ref: '#/components/parameters/groupId'
      responses:
        200:
          $ref: '#/components/responses/BooleanResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/groupsManager/getMemberGroups:
    get:
      tags:
        - GroupsManager
      operationId: getMemberGroups
      summary: Returns groups for a member.
      parameters:
        - $ref: '#/components/parameters/memberId'
      responses:
        200:
          $ref: '#/components/responses/ListOfGroupsResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  #################################################
  #                                               #
  # ResourceManager                               #
  #  (complete with TODOs)                        #
  #################################################

  /json/resourcesManager/getResourceById:
    get:
      tags:
        - ResourcesManager
      operationId: getResourceById
      summary: Returns a resource by id.
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        200:
          $ref: '#/components/responses/ResourceResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/resourcesManager/getResourceByName:
    get:
      tags:
        - ResourcesManager
      operationId: getResourceByName
      summary: Returns resource by its name, Vo id and Facility id.
      parameters:
        - $ref: '#/components/parameters/voId'
        - $ref: '#/components/parameters/facilityId'
        - { name: name, schema: { type: string }, in: query, required: true, description: 'resource name' }
      responses:
        200:
          $ref: '#/components/responses/ResourceResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/resourcesManager/getRichResourceById:
    get:
      tags:
        - ResourcesManager
      operationId: getRichResourceById
      summary: Returns RichResource by id (also containing facility and VO inside).
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        200:
          $ref: '#/components/responses/RichResourceResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /urlinjsonout/resourcesManager/createResource:
    post:
      tags:
        - ResourcesManager
      operationId: createResource
      summary: Creates a new resource.
      parameters:
        - $ref: '#/components/parameters/voId'
        - $ref: '#/components/parameters/facilityId'
        - { name: name, schema: { type: string }, in: query, required: true, description: 'resource name' }
        - { name: description, schema: { type: string }, in: query, required: false, description: 'optional resource description' }
      responses:
        200:
          $ref: '#/components/responses/ResourceResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  #TODO copyResource

  /json/resourcesManager/updateResource:
    post:
      tags:
        - ResourcesManager
      operationId: updateResource
      summary: Updates a resource.
      responses:
        200:
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              title: InputUpdateResource
              description: "input to updateResource"
              type: object
              required:
                - resource
              properties:
                resource: { $ref: '#/components/schemas/Resource' }

  /urlinjsonout/resourcesManager/deleteResource:
    post:
      tags:
        - ResourcesManager
      operationId: deleteResource
      summary: Deletes a resource.
      parameters:
        - $ref: '#/components/parameters/resourceId'
      responses:
        200:
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  #TODO getFacility

  #TODO getVo

  #TODO getAllowedMembers

  #TODO getAllowedUsers

  /urlinjsonout/resourcesManager/assignGroupToResource:
    post:
      tags:
        - ResourcesManager
      operationId: assignGroupToResource
      summary: Assigns a group to a resource. Check if attributes for each member from group are valid. Fill members' attributes with missing value.
      parameters:
        - $ref: '#/components/parameters/groupId'
        - $ref: '#/components/parameters/resourceId'
      responses:
        200:
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /urlinjsonout/resourcesManager/assignGroupsToResource:
    post:
      tags:
        - ResourcesManager
      operationId: assignGroupsToResource
      summary: Assigns groups to a resource. Check if attributes for each member from groups are valid. Fill members' attributes with missing values.
      parameters:
        - $ref: '#/components/parameters/groupIds'
        - $ref: '#/components/parameters/resourceId'
      responses:
        200:
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /urlinjsonout/resourcesManager/assignGroupToResources:
    post:
      tags:
        - ResourcesManager
      operationId: assignGroupToResources
      summary: Assigns a group to resources. Check if attributes for each member from group are valid. Fill members' attributes with missing values.
      parameters:
        - $ref: '#/components/parameters/groupId'
        - $ref: '#/components/parameters/resourceIds'
      responses:
        200:
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /urlinjsonout/resourcesManager/removeGroupFromResource:
    post:
      tags:
        - ResourcesManager
      operationId: removeGroupFromResource
      summary: Remove a group from a resource. After removing, check attributes and fix them if it is needed.
      parameters:
        - $ref: '#/components/parameters/groupId'
        - $ref: '#/components/parameters/resourceId'
      responses:
        200:
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /urlinjsonout/resourcesManager/removeGroupsFromResource:
    post:
      tags:
        - ResourcesManager
      operationId: removeGroupsFromResource
      summary: Remove groups from a resource. After removing, check attributes and fix them if it is needed.
      parameters:
        - $ref: '#/components/parameters/groupIds'
        - $ref: '#/components/parameters/resourceId'
      responses:
        200:
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /urlinjsonout/resourcesManager/removeGroupFromResources:
    post:
      tags:
        - ResourcesManager
      operationId: removeGroupFromResources
      summary: Remove a group from resource. After removing, check attributes and fix them if it is needed.
      parameters:
        - $ref: '#/components/parameters/groupId'
        - $ref: '#/components/parameters/resourceIds'
      responses:
        200:
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/resourcesManager/getAssignedGroups:
    get:
      tags:
        - ResourcesManager
      operationId: getAssignedGroups
      summary: List all groups associated with the resource and optionally a member.
      parameters:
        - $ref: '#/components/parameters/resourceId'
        - { name: member, required: false, schema: { type: integer}, in: query, description: 'optional member id' }
      responses:
        200:
          $ref: '#/components/responses/ListOfGroupsResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  #TODO getAssignedResources

  #TODO getAssignedRichResources

  #TODO getAssignedMembers

  #TODO getAssignedRichMembers

  #TODO addAdmin

  #TODO removeAdmin

  #TODO getAdmins

  #TODO getAdminGroups

  #TODO getRichAdmins

  /json/resourcesManager/getResourcesWhereUserIsAdmin:
    get:
      tags:
        - ResourcesManager
      operationId: getResourcesWhereUserIsAdmin
      summary: Returns list of Resources for specified VO and Facility, where the user is an Administrator.
      parameters:
        - $ref: '#/components/parameters/facilityId'
        - $ref: '#/components/parameters/voId'
        - $ref: '#/components/parameters/userId'
      responses:
        200:
          $ref: '#/components/responses/ListOfResourcesResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/resourcesManager/getResourcesWhereUserIsAdmin/group:
    get:
      tags:
        - ResourcesManager
      operationId: getResourcesWhereGroupIsAdmin
      summary: Returns list of Resources for specified VO and Facility, where the group is an Administrator.
      parameters:
        - $ref: '#/components/parameters/facilityId'
        - $ref: '#/components/parameters/voId'
        - $ref: '#/components/parameters/groupId'
      responses:
        200:
          $ref: '#/components/responses/ListOfResourcesResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/resourcesManager/getResourcesWhereUserIsAdmin/fromVo:
    get:
      tags:
        - ResourcesManager
      operationId: getResourcesFromVoWhereUserIsAdmin
      summary: Returns list of Resources for specified VO, where the user is an Administrator.
      parameters:
        - $ref: '#/components/parameters/voId'
        - $ref: '#/components/parameters/userId'
      responses:
        200:
          $ref: '#/components/responses/ListOfResourcesResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/resourcesManager/getResourcesWhereUserIsAdmin/all:
    get:
      tags:
        - ResourcesManager
      operationId: getAllResourcesWhereUserIsAdmin
      summary: Returns list of Resources, where the group is an Administrator.
      parameters:
        - $ref: '#/components/parameters/userId'
      responses:
        200:
          $ref: '#/components/responses/ListOfResourcesResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /urlinjsonout/resourcesManager/assignService:
    post:
      tags:
        - ResourcesManager
      operationId: assignService
      summary: Assigns service to resource.
      parameters:
        - $ref: '#/components/parameters/resourceId'
        - $ref: '#/components/parameters/serviceId'
      responses:
        200:
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /urlinjsonout/resourcesManager/assignServicesPackage:
    post:
      tags:
        - ResourcesManager
      operationId: assignServicesPackage
      summary: Assign all services from a services package to a resource.
      parameters:
        - $ref: '#/components/parameters/resourceId'
        - $ref: '#/components/parameters/servicesPackageId'
      responses:
        200:
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /urlinjsonout/resourcesManager/removeService:
    post:
      tags:
        - ResourcesManager
      operationId: removeService
      summary: Removes a service from a resource.
      parameters:
        - $ref: '#/components/parameters/resourceId'
        - $ref: '#/components/parameters/serviceId'
      responses:
        200:
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /urlinjsonout/resourcesManager/removeServicesPackage:
    post:
      tags:
        - ResourcesManager
      operationId: removeServicesPackage
      summary: Remove from resource all services from services package.
      parameters:
        - $ref: '#/components/parameters/resourceId'
        - $ref: '#/components/parameters/servicesPackageId'
      responses:
        200:
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  #TODO getResources

  #TODO getRichResources

  #TODO getResourcesCount

  #TODO deleteAllResources

  #TODO getAllowedResources

  #TODO createResourceTag

  #TODO updateResourceTag

  #TODO deleteResourceTag

  #TODO deleteAllResourcesTagsForVo

  /json/resourcesManager/assignResourceTagToResource:
    post:
      tags:
        - ResourcesManager
      operationId: assignResourceTagToResource
      summary: Assigns ResourceRag to resource. The ResourceTag must contain its id, voId and tagName.
      responses:
        200:
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              title: InputAssignResourceTagToResource
              description: "input to assignResourceTagToResource"
              type: object
              required:
                - resource
                - resourceTag
              properties:
                resource: { type: integer, description: 'resource id' }
                resourceTag: { $ref: '#/components/schemas/ResourceTag' }

  /json/resourcesManager/removeResourceTagFromResource:
    post:
      tags:
        - ResourcesManager
      operationId: removeResourceTagFromResource
      summary: Removes ResourceRag from a resource. The ResourceTag must contain its id, voId and tagName.
      responses:
        200:
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              title: InputRemoveResourceTagFromResource
              description: "input to removeResourceTagFromResource"
              type: object
              required:
                - resource
                - resourceTag
              properties:
                resource: { type: integer, description: 'resource id' }
                resourceTag: { $ref: '#/components/schemas/ResourceTag' }

  /urlinjsonout/resourcesManager/removeAllResourcesTagFromResource:
    post:
      tags:
        - ResourcesManager
      operationId: removeAllResourceTagsFromResource
      summary: Removes all resources tags from a resource.
      parameters:
        - $ref: '#/components/parameters/resourceId'
      responses:
        200:
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/resourcesManager/getAllResourcesByResourceTag:
    post:
      tags:
        - ResourcesManager
      operationId: getAllResourcesByResourceTag
      summary: Get all resources with the specific tag assigned.
      responses:
        200:
          $ref: '#/components/responses/ListOfResourcesResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              title: InputGetAllResourcesByResourceTag
              description: "input to getAllResourcesByResourceTag"
              type: object
              required:
                - resourceTag
              properties:
                resource: { type: integer, description: 'resource id' }
                resourceTag: { $ref: '#/components/schemas/ResourceTag' }

  /json/resourcesManager/getAllResourcesTagsForVo:
    get:
      tags:
        - ResourcesManager
      operationId: getAllResourcesTagsForVo
      summary: Gets all resource tags of VO.
      parameters:
        - $ref: '#/components/parameters/voId'
      responses:
        200:
          $ref: '#/components/responses/ListOfResourceTagsResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/resourcesManager/getAllResourcesTagsForResource:
    get:
      tags:
        - ResourcesManager
      operationId: getAllResourcesTagsForResource
      summary: Gets all resource tags of Resource.
      parameters:
        - $ref: '#/components/parameters/resourceId'
      responses:
        200:
          $ref: '#/components/responses/ListOfResourceTagsResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  #TODO getAssignedServices

  #TODO setBan

  #TODO getBanById

  #TODO getBan

  #TODO getBansForMember

  #TODO getBansForResource

  #TODO updateBan

  #TODO removeBan

  #TODO addResourceSelfServiceUser

  #TODO addResourceSelfServiceGroup

  #TODO removeResourceSelfServiceUser

  #TODO removeResourceSelfServiceGroup


  #################################################
  #                                               #
  # VosManager                                    #
  #  (complete with TODOs)                        #
  #################################################

  /json/vosManager/getVos:
    get:
      tags:
        - VosManager
      operationId: getMyVos
      summary: Return list of all VOs the caller is associated with.
      responses:
        200:
          $ref: '#/components/responses/ListOfVosResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/vosManager/getAllVos:
    get:
      tags:
        - VosManager
      operationId: getAllVos
      summary: Return list of all VOs in Perun.
      responses:
        200:
          $ref: '#/components/responses/ListOfVosResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  #TODO deleteVo

  #TODO createVo

  #TODO updateVo

  /json/vosManager/getVoByShortName:
    get:
      tags:
        - VosManager
      operationId: getVoByShortName
      summary: Returns a VO by its short name.
      parameters:
        - { name: shortName, description: "short name of Vo", schema: { type: string },  in: query }
      responses:
        200:
          $ref: '#/components/responses/VoResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/vosManager/getVoById:
    get:
      tags:
        - VosManager
      operationId: getVoById
      summary: Returns a virtual organization by id.
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        200:
          $ref: '#/components/responses/VoResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  #TODO findCandidates

  #TODO getCompleteCandidates

  #TODO getVosCount

  /urlinjsonout/vosManager/addAdmin/user:
    post:
      tags:
        - VosManager
      operationId: addVoAdminUser
      summary: Adds a user as a Vo admin.
      parameters:
        - $ref: '#/components/parameters/voId'
        - $ref: '#/components/parameters/userId'
      responses:
        200:
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /urlinjsonout/vosManager/addAdmin/group:
    post:
      tags:
        - VosManager
      operationId: addVoAdminGroup
      summary: Adds a group as a Vo admin.
      parameters:
        - $ref: '#/components/parameters/voId'
        - { name: authorizedGroup, schema: { type: integer}, in: query, required: true, description: 'Group id' }
      responses:
        200:
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  #TODO addSponsorRole

  /urlinjsonout/vosManager/removeAdmin/user:
    post:
      tags:
        - VosManager
      operationId: removeVoAdminUser
      summary: Removes a user as a Vo admin.
      parameters:
        - $ref: '#/components/parameters/voId'
        - $ref: '#/components/parameters/userId'
      responses:
        200:
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /urlinjsonout/vosManager/removeAdmin/group:
    post:
      tags:
        - VosManager
      operationId: removeVoAdminGroup
      summary: Removes a group as a Vo admin.
      parameters:
        - $ref: '#/components/parameters/voId'
        - { name: authorizedGroup, schema: { type: integer}, in: query, required: true, description: 'Group id' }
      responses:
        200:
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  #TODO removeSponsorRole

  /json/vosManager/getAdmins:
    get:
      tags:
        - VosManager
      operationId: getVoAdminUsers
      description: |
        Get list of all vo administrators for supported role and specific vo.
        If onlyDirectAdmins is true, return only direct admins of the vo for supported role.
        Supported roles: VOOBSERVER, TOPGROUPCREATOR, VOADMIN
      parameters:
        - $ref: '#/components/parameters/voId'
        - { name: role, schema: { $ref: '#/components/schemas/VoAdminRoles' }, in: query, required: true, description: 'supported role name'}
        - { name: onlyDirectAdmins, schema: { type: boolean }, in: query, required: true, description: "get only direct administrators (if false, get both direct and indirect)"}
      responses:
        200:
          $ref: '#/components/responses/ListOfUsersResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/vosManager/getAdminGroups:
    get:
      tags:
        - VosManager
      operationId: getVoAdminGroups
      description: |
        Get list of administrator groups of the given VO.
        Supported roles: VOOBSERVER, TOPGROUPCREATOR, VOADMIN
      parameters:
        - $ref: '#/components/parameters/voId'
        - { name: role, schema: { $ref: '#/components/schemas/VoAdminRoles' }, in: query, required: true, description: 'supported role name'}
      responses:
        200:
          $ref: '#/components/responses/ListOfGroupsResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'


  #TODO getRichAdmins


  #################################################
  #                                               #
  # RegistrarManager                              #
  #                                               #
  #################################################

  /json/registrarManager/getApplicationForm/vo:
    get:
      tags:
        - RegistrarManager
      operationId: getVoApplicationForm
      summary: Gets an application form for a given VO.
      description: |
        There is exactly one form for membership per VO, one form is used for both initial registration and annual account expansion,
        just the form items are marked whether the should be present in one, the other, or both types of application.
      parameters:
        - $ref: '#/components/parameters/voId'
      responses:
        200:
          $ref: '#/components/responses/ApplicationFormResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/registrarManager/getApplicationForm/group:
    get:
      tags:
        - RegistrarManager
      operationId: getGroupApplicationForm
      summary: Gets an application form for a given Group.
      description: |
        There is exactly one form for membership per Group, one form is used for both initial registration and annual account expansion,
        just the form items are marked whether the should be present in one, the other, or both types of application.
      parameters:
        - $ref: '#/components/parameters/groupId'
      responses:
        200:
          $ref: '#/components/responses/ApplicationFormResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  #################################################
  #                                               #
  # ServicesManager                               #
  #  (complete with TODOs)                        #
  #################################################

  #TODO blockServiceOnFacility

  #TODO blockServiceOnDestination

  #TODO blockAllServicesOnFacility

  #TODO blockAllServicesOnDestination

  #TODO getServicesBlockedOnFacility

  #TODO getServicesBlockedOnDestination

  #TODO isServiceBlockedOnFacility

  #TODO isServiceBlockedOnDestination

  #TODO unblockAllServicesOnFacility

  #TODO unblockAllServicesOnDestination

  #TODO unblockServiceOnFacility

  #TODO unblockServiceOnDestination

  #TODO forceServicePropagation

  #TODO planServicePropagation

  #TODO getFacilityAssignedServicesForGUI

  #TODO createService

  #TODO deleteService

  #TODO updateService

  /json/servicesManager/getServiceById:
    get:
      tags:
        - ServicesManager
      operationId: getServiceById
      summary: Returns a service by its id.
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        200:
          $ref: '#/components/responses/ServiceResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/servicesManager/getServiceByName:
    get:
      tags:
        - ServicesManager
      operationId: getServiceByName
      summary: Returns a service by its name.
      parameters:
        - name: name
          description: name of service
          required: true
          in: query
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/responses/ServiceResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  #TODO getServices

  #TODO getServicesByAttributeDefinition

  #TODO getHierarchicalData

  #TODO getFlatData

  #TODO getDataWithGroups

  #TODO getDataWithVos

  #TODO getServicesPackages

  #TODO getServicesPackageById

  #TODO getServicesPackageByName

  #TODO createServicesPackage

  #TODO deleteServicesPackage

  #TODO updateServicesPackage

  #TODO addServiceToServicesPackage

  #TODO removeServiceFromServicesPackage

  #TODO getServicesFromServicesPackage

  #TODO addRequiredAttribute

  #TODO addRequiredAttributes

  #TODO removeRequiredAttribute

  #TODO removeRequiredAttributes

  #TODO removeAllRequiredAttributes

  /json/servicesManager/getDestinationById:
    get:
      tags:
        - ServicesManager
      operationId: getDestinationById
      summary: Returns a destination by its id.
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        200:
          $ref: '#/components/responses/DestinationResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/servicesManager/getDestinations/s-f:
    get:
      tags:
        - ServicesManager
      operationId: getDestinations
      summary: Returns list of all destinations defined for the service and facility.
      parameters:
        - $ref: '#/components/parameters/serviceId'
        - $ref: '#/components/parameters/facilityId'
      responses:
        200:
          $ref: '#/components/responses/ListOfDestinationsResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/servicesManager/getDestinations/all:
    get:
      tags:
        - ServicesManager
      operationId: getAllDestinations
      summary: Get list of all destinations.
      responses:
        200:
          $ref: '#/components/responses/ListOfDestinationsResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'


  /json/servicesManager/getAllRichDestinations/s:
    get:
      tags:
        - ServicesManager
      operationId: getRichDestinationsForService
      summary: Returns list of all rich destinations defined for the service.
      parameters:
        - $ref: '#/components/parameters/serviceId'
      responses:
        200:
          $ref: '#/components/responses/ListOfRichDestinationsResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/servicesManager/getAllRichDestinations/f:
    get:
      tags:
        - ServicesManager
      operationId: getRichDestinationsForFacility
      summary: Returns list of all rich destinations defined for the facility.
      parameters:
        - $ref: '#/components/parameters/facilityId'
      responses:
        200:
          $ref: '#/components/responses/ListOfRichDestinationsResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/servicesManager/getRichDestinations:
    get:
      tags:
        - ServicesManager
      operationId: getRichDestinations
      summary: Returns list of all rich destinations defined for the service and facility.
      parameters:
        - $ref: '#/components/parameters/serviceId'
        - $ref: '#/components/parameters/facilityId'
      responses:
        200:
          $ref: '#/components/responses/ListOfRichDestinationsResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /urlinjsonout/servicesManager/addDestination:
    post:
      tags:
        - ServicesManager
      operationId: addDestination
      summary: Adds an destination for a facility and service. If destination doesn't exist it will be created.
      parameters:
        - $ref: '#/components/parameters/serviceId'
        - $ref: '#/components/parameters/facilityId'
        - { name: destination, description: "Destination's destination, usually a DNS name", schema: { type: string },  in: query, required: true }
        - { name: type, description: "Destination's type", schema: { $ref: '#/components/schemas/DestinationType' },  in: query, required: true }
        - { name: propagationType, description: "Destination's propagationType", schema: { $ref: '#/components/schemas/DestinationPropagationType' },  in: query, required: true }
      responses:
        200:
          $ref: '#/components/responses/DestinationResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/servicesManager/addDestination:
    post:
      tags:
        - ServicesManager
      operationId: addDestinationToMultipleServices
      description: Adds an destination for a facility and list of services. If destination doesn't exist it will be created.
      responses:
        200:
          $ref: '#/components/responses/DestinationResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              title: InputAddDestinationToMultipleServices
              description: "input to addDestinationToMultipleServices"
              type: object
              required:
                - services
                - facility
                - destination
                - type
                - propagationType
              properties:
                services:
                  type: array
                  items:
                    $ref: '#/components/schemas/Service'
                facility: { type: integer }
                destination: { type: string }
                type: { $ref: '#/components/schemas/DestinationType' }
                propagationType: { $ref: '#/components/schemas/DestinationPropagationType' }


  #TODO addDestinationsForAllServicesOnFacility

  #TODO addDestinationsDefinedByHostsOnFacility

  /urlinjsonout/servicesManager/removeDestination:
    post:
      tags:
        - ServicesManager
      operationId: removeDestination
      summary: Removes the specified destination from the facility and service.
      parameters:
        - $ref: '#/components/parameters/serviceId'
        - $ref: '#/components/parameters/facilityId'
        - { name: destination, description: "Destination's destination", schema: { type: string },  in: query, required: true }
        - { name: type, description: "Destination's type", schema: { $ref: '#/components/schemas/DestinationType' },  in: query, required: true }
      responses:
        200:
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /urlinjsonout/servicesManager/removeAllDestinations:
    post:
      tags:
        - ServicesManager
      operationId: removeAllDestinations
      summary: Removes all destinations from a facility and service.
      parameters:
        - $ref: '#/components/parameters/serviceId'
        - $ref: '#/components/parameters/facilityId'
      responses:
        200:
          $ref: '#/components/responses/VoidResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  #TODO getFacilitiesDestinations

  #TODO getDestinationsCount

  /json/servicesManager/getAssignedServices:
    get:
      tags:
        - ServicesManager
      operationId: getAssignedServices
      summary: List all services associated with the facility (via resource).
      parameters:
        - $ref: '#/components/parameters/facilityId'
      responses:
        200:
          $ref: '#/components/responses/ListOfServicesResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'

  /json/servicesManager/getAssignedResourcesForService:
    get:
      tags:
        - ServicesManager
      operationId: getAssignedResources
      summary: Lists resources assigned to service.
      parameters:
        - $ref: '#/components/parameters/serviceId'
      responses:
        200:
          $ref: '#/components/responses/ListOfResourcesResponse'
        default:
          $ref: '#/components/responses/ExceptionResponse'
